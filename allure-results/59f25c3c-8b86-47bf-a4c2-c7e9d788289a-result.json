{"name": "使用other提交退货单成功", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_main.Test_Main object at 0x0000013C3E1CF880>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"eeaae31250d5c4b4c8480299db4e3e21\")>\nParameter = {'assert_way': 'css selector=body > div.ant-message > span > div > div > div > span', 'case_no': '96', 'casename': '使用...reason=other\\ntext=123412412\\nimg=C:\\\\Users\\\\admin\\\\PycharmProjects\\\\pythonProject\\\\okmarts_ui_test\\\\data\\\\1.jpg', ...}\n\n    @allure.feature('订单管理')\n    @pytest.mark.parametrize('Parameter', case_infos['my_order'], ids=casename_infos['my_order'])\n    def test_my_order(self, driver, Parameter):\n        allure.dynamic.title(Parameter['casename'])\n>       My_Order().my_order(driver, Parameter)\n\ntest_main.py:125: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.my_order.My_Order object at 0x0000013C3DE8FF10>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"eeaae31250d5c4b4c8480299db4e3e21\")>\nParameter = {'assert_way': 'css selector=body > div.ant-message > span > div > div > div > span', 'case_no': '96', 'casename': '使用...reason=other\\ntext=123412412\\nimg=C:\\\\Users\\\\admin\\\\PycharmProjects\\\\pythonProject\\\\okmarts_ui_test\\\\data\\\\1.jpg', ...}\n\n    def my_order(self, driver, Parameter):\n        casename = Parameter['casename']\n        data = Parameter['data']\n        print(data)\n        assert_way = Parameter['assert_way']\n        result = Parameter['result']\n    \n        driver.get('http://18.118.13.94:81/index')  # 打开首页\n        time.sleep(1)\n        Common().is_login(driver, useraccount='979172251@qq.com', password='a123456')  # 检测是否登录\n        time.sleep(1)\n        driver.find_element(by='css selector', value='#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1)').click()  # 点击头像\n        time.sleep(2)\n        if casename == '点击个人中心Order record 订单成功显示':\n            print('通道1')\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").is_displayed()\n            print(text)\n            assert text == result\n        elif casename == '点击订单中的商品名称跳转商品详情成功':\n            print('通道2 ')\n            goods_name = driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[3]/div[1]/div/div[1]/div[2]/div/div[2]/div[1]/div[1]/div/a').text\n            print(goods_name)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[3]/div[1]/div/div[1]/div[2]/div/div[2]/div[1]/div[1]/div/a').click()  # 点击商品名称\n            time.sleep(2)\n            buy_now = driver.find_elements(by='class name', value='atn-btn-orange.ant-btn.ant-btn-block')[1].text  # 获取buy_now\n            # 文本 确认是在商品详情页面\n            print(buy_now)\n            assert buy_now == 'Buy now'\n    \n            goods_name1 = driver.find_element(by='class name', value='title.text-black.margin-bottom-sm').text  # 获取详情页面 商品名称\n            assert goods_name == goods_name1\n        elif casename == \"点击查看物流查看成功\":\n            print('通道3')\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[3]/div[1]/div/div[1]/div[2]/div/div[2]/div[1]/div[4]/a').click()  # 点击物流按钮\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(text)\n            assert text == result\n        elif casename == '未支付订单点击未支付跳转到支付页面':\n            print('通道4')\n            n = 0  # 判断是否找到\n            page = 0  # 判断所处页数\n            while True:\n                n = self.find_Unpaid(driver, n)\n                page += 1\n                print(f'n 为 {n} ')\n                if n == 0:  # 如果循环后没有找到 点击下一页进行查找\n                    print(f'第{page}未找到待支付订单数据')\n                    # 查询该页面是否为最后一页\n                    try:\n                        # 移动到翻页处\n                        Common().huadong(driver, by='class name', value='ant-pagination-item-link')\n                        # 先判断下一页按钮状态 如果为true 说明是最后一页\n                        info = driver.find_element(by='class name', value='ant-pagination-disabled.ant-pagination-next').get_attribute(\n                            'aria-disabled')\n                        if info == \"true\":\n                            print('此页为最后一页')\n                            break\n                    except NoSuchElementException:\n                        print('不是最后一页')\n                        driver.find_element(by='css selector', value='li[class=\" ant-pagination-next\"]').click()  # 点击下一页\n                        print('点击下一页')\n                        time.sleep(2)\n                else:  # 如果找到了-->\n                    print(f'第{page}页存在待支付数据')\n                    break\n            if n == 0:\n                print('该账户不存在待支付数据')\n                pass\n            else:\n                time.sleep(2)\n                # 获取待支付页面 断言文本\n                text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                           value=f\"{assert_way.split('=', 1)[1]}\").text\n                print(text)\n                assert text == result\n        elif casename == '点击order data可以根据订单时间进行排序':\n            Common().huadong(driver, by='class name', value='text-tit-lg.flex')  # 滑动到订单最上方\n            time.sleep(1)\n            element = driver.find_element(by='css selector',\n                                          value='#app > div > div.ui-container > div.content.my-center-form > div > div.record_out > div.table-out > div > div.title.flex.align-center > div:nth-child(2) > svg')\n            info = element.get_attribute('p-id')\n            self.assert_time_desc(driver, info)\n            time.sleep(2)\n            element.click()\n            info2 = element.get_attribute('p-id')\n            if info2 == info:\n                print('点击后未发生变化，再次点击')\n                element.click()  # 再次点击\n                time.sleep(2)\n                info3 = element.get_attribute('p-id')\n                self.assert_time_desc(driver, info3)\n            else:\n                self.assert_time_desc(driver, info2)\n        elif casename == '点击Total price可以根据订单金额进行排序':\n            Common().huadong(driver, by='class name', value='text-tit-lg.flex')  # 滑动到订单最上方\n            time.sleep(1)\n            element = driver.find_element(by='css selector', value='#app > div > div.ui-container > div.content.my-center-form > div > div.record_out > div.table-out '\n                                                                   '> div > div.title.flex.align-center > div:nth-child(3) > svg')\n            info = element.get_attribute('p-id')\n            self.assert_price_desc(driver, info)\n            time.sleep(1)\n            element.click()\n            info2 = element.get_attribute('p-id')\n            if info2 == info:\n                print('点击后未发生变化')\n                element.click()\n                time.sleep(1)\n                info3 = element.get_attribute('p-id')\n                self.assert_price_desc(driver, info3)\n            else:\n                self.assert_price_desc(driver, info2)\n        elif casename == '通过关键字及全文查找可以成功查询相同名称的订单':\n            Common().huadong(driver, by='class name', value='text-tit-lg.flex')  # 滑动到订单最上方\n            time.sleep(1)\n            try:\n                info = driver.find_element(by='css selector',\n                                           value='#app > div > div.ui-container > div.content.my-center-form > div > div.record_out > div.table-out > div > '\n                                                 'div.tableData > div:nth-child(1) > div.item.width-32.name > div > a').text\n                print(info)\n            except NoSuchElementException:\n                print('未找到订单数据')\n                raise AssertionError\n    \n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[3]/div[1]/div/div[1]/div[1]/div[2]/span/input').send_keys(info)  # 搜索栏输入名字\n            driver.find_element(by='class name', value='anticon.anticon-search.ant-input-search-icon').click()  # 点击搜索按钮\n            time.sleep(2)\n            elements = driver.find_elements(by='css selector', value='div[class=\"item width-32 name\"] > div > a')\n            erro = 0\n            for element in elements:\n                print(element.text)\n                if info in element.text:\n                    pass\n                else:\n                    erro += 1\n            if erro == 0:\n                assert True\n            else:\n                assert False\n        elif casename == '已签收订单点击退货申请进入退货页面成功':\n            n = self.go_return_goods(driver)\n            if n == 0:\n                print('该账户不存在已签收数据')\n                pass\n            else:\n                time.sleep(2)\n                # 获取待支付页面 断言文本\n                try:\n                    text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n                    print(text)\n                    assert text == result\n                except:\n                    raise AssertionError\n        elif '提交退货单' in casename:\n            self.get_Request_Return()\n            self.truncate_table()\n            n = self.go_return_goods(driver)\n            if n == 0:\n                print('该账户不存在已签收数据')\n                pytest.skip(msg=\"未找到相关数据\")\n            else:\n                time.sleep(2)\n                Reasons_for_return = data.split('\\n')[0].split('=')[-1]\n                print(Reasons_for_return)\n                reason = data.split('\\n')[1].split('=')[-1]\n                print(reason)\n                img = data.split('\\n')[2].split('=')[-1]\n                print(img)\n                if Reasons_for_return == 'Wrong order inform ation':\n                    driver.find_elements(by='class name', value='ant-select-selection__rendered')[1].click()\n                    time.sleep(1)\n                    driver.find_elements(by=\"class name\", value='ant-select-dropdown-menu-item')[1].click()  # 点击第2个\n                elif Reasons_for_return == 'Model error':\n                    driver.find_elements(by='class name', value='ant-select-selection__rendered')[1].click()\n                    time.sleep(1)\n                    driver.find_elements(by=\"class name\", value='ant-select-dropdown-menu-item')[2].click()  # 点击第3个\n                elif Reasons_for_return == 'other':\n                    driver.find_elements(by='class name', value='ant-select-selection__rendered')[1].click()\n                    time.sleep(1)\n                    driver.find_elements(by=\"class name\", value='ant-select-dropdown-menu-item')[3].click()  # 点击第4个\n                time.sleep(1)\n                driver.find_element(by='class name', value='tuik_text').send_keys(reason)  # 输入原因\n                if img == 'null':\n                    print('不上传图片')\n                    pass\n                else:\n                    if casename == '使用视频文件提交退货单失败':\n                        img_file = f'../data/test_8.mp4'\n                        img_path = os.path.abspath(img_file)\n                    else:\n                        img_file = f'../data/1.jpg'\n                        img_path = os.path.abspath(img_file)\n                    print(f'img_path为{img_path}')\n                    driver.find_element(by='class name', value='ant-upload').click()  # 点击上传\n                    time.sleep(2)\n                    pk = PyKeyboard()\n                    # 实例化\n                    pk.press_key(pk.shift_key)\n                    pk.release_key(pk.shift_key)\n                    pk.type_string(img_path)\n                    time.sleep(2)\n                    pk.press_key(pk.enter_key)  # 按压\n                    pk.release_key(pk.enter_key)  # 释放\n                    pk.press_key(pk.enter_key)  # 按压\n                    pk.release_key(pk.enter_key)  # 释放\n                    time.sleep(2)\n                driver.find_element(by='css selector', value='#app > div > div.ui-container > div.wai_box > div > div.tuik_div > div.tuik_right > button').click()  # 点击提交\n                time.sleep(2)\n                try:\n                    text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                                   value=f\"{assert_way.split('=', 1)[1]}\").text\n                    print(f'text为{text}')\n>                   assert text == result\nE                   AssertionError\n\n..\\mode\\my_order.py:236: AssertionError"}, "steps": [{"name": "添加失败截图...", "status": "passed", "attachments": [{"name": "失败截图", "source": "4d8fd77a-9d26-4200-a133-692c64f0e0b8-attachment.png", "type": "image/png"}], "start": 1652862534915, "stop": 1652862535057}], "attachments": [{"name": "stdout", "source": "bd883698-2b79-4e88-b3ac-401ac2f0e6c6-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "Parameter", "value": "{'case_no': '96', 'casename': '使用other提交退货单成功', 'mode': '订单管理', 'data': 'reason=other\\ntext=123412412\\nimg=C:\\\\Users\\\\admin\\\\PycharmProjects\\\\pythonProject\\\\okmarts_ui_test\\\\data\\\\1.jpg', 'assert_way': 'css selector=body > div.ant-message > span > div > div > div > span', 'result': 'add success'}"}], "start": 1652862501098, "stop": 1652862534894, "uuid": "ac7df70b-28c5-4ba5-965b-5b1bb2614dc6", "historyId": "245cd4c5b0534b55bee499eae369ce3d", "testCaseId": "7ada25215fe1778912de4f80f444a520", "fullName": "test_main.Test_Main#test_my_order", "labels": [{"name": "feature", "value": "订单管理"}, {"name": "suite", "value": "test_main"}, {"name": "subSuite", "value": "Test_Main"}, {"name": "host", "value": "DESKTOP-NB3FDE0"}, {"name": "thread", "value": "23480-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_main"}]}