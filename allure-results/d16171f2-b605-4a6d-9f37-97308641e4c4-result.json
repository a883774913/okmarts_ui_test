{"name": "当商品添加数量为1时无法点击-号", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <okmarts_ui_test.mode.shop_car.Shop_Car object at 0x000001D1EBBD2DC0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d1ada906210b70896bceae01dc4cd77a\")>\nParameter = {'assert_way': 'class name=cart-btn-count.ant-btn', 'case_no': '', 'casename': '当商品添加数量为1时无法点击-号', 'data': '', ...}\n\n    def shop_car(self, driver, Parameter):\n        casename = Parameter['casename']\n        data = Parameter['data']\n        print(data)\n        assert_way = Parameter['assert_way']\n        result = Parameter['result']\n    \n        driver.get('http://18.118.13.94:81/index')  # 打开首页\n        WebDriverWait(driver, 20, 0.2).until(lambda x: x.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div/div[2]/div[3]/div[3]/span[1]'))\n        time.sleep(1)\n        if casename == '未登录状态下点击购物车页面跳转到登录页面成功':\n            Common().Restore_environment(driver)\n            time.sleep(1)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div/div[2]/div[3]/div[3]/span[1]').click()\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(text)\n            assert text == result\n        else:\n            Common().is_login(driver, useraccount='979172251@qq.com', password='a123456')\n            time.sleep(2)\n            if casename == '首页显示购物车图标，点击购物车，页面跳转到购物车页面':\n                info = driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div/div[2]/div[3]/div[3]/span[1]').text  # 检查是否存在购物车按钮\n                print(info)\n                goods_number = driver.find_element(by='class name', value='num').text       #获取购物车小图标显示数量\n                print(goods_number)\n                assert info == 'Cart'\n                driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div/div[2]/div[3]/div[3]/span[1]').click()     #点击购物车\n                time.sleep(2)\n                if goods_number == '0':\n                    text = driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div/div[2]/div[1]/a').text\n                    print('不存在商品')\n                    print(text)\n                    assert text == 'The shopping cart is still empty for the time being, go pick a few items right away'\n                else:\n                    print('存在商品')\n                    text = driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div/div[2]/div[1]/div[1]/div[1]/div[1]/span').text\n                    assert text == 'Shopping cart'\n            elif casename == '购物车内无商品时点击相关文字跳转到首页成功':\n                goods_number = driver.find_element(by='class name', value='num').text  # 判断购物车是否有商品\n                if goods_number != '0':  # 如果商品数量不为0，删除该账户购物车商品数据\n                    print('存在商品，删除中')\n                    Mysql().drop_table(user=\"root\", pwd=\"OKmarts888.,\", host=\"18.118.13.94\", db=\"okmarts\", port=3306,\n                                       sql=\"DELETE FROM shopping_cart WHERE userid='1506910015154425856';\")\n                    time.sleep(1)\n                else:\n                    pass\n                driver.find_element(by='class name', value='num').click()\n                time.sleep(2)\n                text = driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div/div[2]/div[1]/a').text\n                print(text)\n                assert text == 'The shopping cart is still empty for the time being, go pick a few items right away'\n                driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div/div[2]/div[1]/a').click()\n                time.sleep(2)\n                text1 = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                            value=f\"{assert_way.split('=', 1)[1]}\").text\n                assert text1 == result\n            elif casename == '当商品添加数量为1时无法点击-号':\n                Mysql().drop_table(user=\"root\", pwd=\"OKmarts888.,\", host=\"18.118.13.94\", db=\"okmarts\", port=3306,\n                                   sql=\"DELETE FROM shopping_cart WHERE userid='1506910015154425856';\")\n                time.sleep(1)\n                self.add_goods_to_shopcar(driver)  # 加入商品至购物车\n                try:\n>                   info = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").get_attribute(\"disabled\")\n\n..\\mode\\shop_car.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d1ada906210b70896bceae01dc4cd77a\")>\nby = 'css selector', value = '.cart-btn-count.ant-btn'\n\n    def find_element(self, by=By.ID, value=None) -> WebElement:\n        \"\"\"\n        Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            return self.find_elements(by=by, value=value)[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = '[id=\"%s\"]' % value\n        elif by == By.TAG_NAME:\n            by = By.CSS_SELECTOR\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = \".%s\" % value\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = '[name=\"%s\"]' % value\n    \n>       return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n            'value': value})['value']\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1244: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d1ada906210b70896bceae01dc4cd77a\")>\ndriver_command = 'findElement'\nparams = {'using': 'css selector', 'value': '.cart-btn-count.ant-btn'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D1EB012670>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...unk [0x76D76739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77D88E7F+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x77D88E4D+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".cart-btn-count.ant-btn\"}\nE         (Session info: chrome=101.0.4951.54)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00557413+2389011]\nE       \tOrdinal0 [0x004E9F61+1941345]\nE       \tOrdinal0 [0x003DC658+837208]\nE       \tOrdinal0 [0x004091DD+1020381]\nE       \tOrdinal0 [0x0040949B+1021083]\nE       \tOrdinal0 [0x00436032+1204274]\nE       \tOrdinal0 [0x00424194+1130900]\nE       \tOrdinal0 [0x00434302+1196802]\nE       \tOrdinal0 [0x00423F66+1130342]\nE       \tOrdinal0 [0x003FE546+976198]\nE       \tOrdinal0 [0x003FF456+980054]\nE       \tGetHandleVerifier [0x00709632+1727522]\nE       \tGetHandleVerifier [0x007BBA4D+2457661]\nE       \tGetHandleVerifier [0x005EEB81+569713]\nE       \tGetHandleVerifier [0x005EDD76+566118]\nE       \tOrdinal0 [0x004F0B2B+1968939]\nE       \tOrdinal0 [0x004F5988+1989000]\nE       \tOrdinal0 [0x004F5A75+1989237]\nE       \tOrdinal0 [0x004FECB1+2026673]\nE       \tBaseThreadInitThunk [0x76D76739+25]\nE       \tRtlGetFullPathName_UEx [0x77D88E7F+1215]\nE       \tRtlGetFullPathName_UEx [0x77D88E4D+1165]\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_main.Test_Main object at 0x000001D1EBD7F610>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d1ada906210b70896bceae01dc4cd77a\")>\nParameter = {'assert_way': 'class name=cart-btn-count.ant-btn', 'case_no': '', 'casename': '当商品添加数量为1时无法点击-号', 'data': '', ...}\n\n    @allure.feature('购物车')\n    @pytest.mark.parametrize('Parameter', case_infos['shop_car'], ids=casename_infos['shop_car'])\n    def test_shop_car(self,driver,Parameter):\n        allure.dynamic.title(Parameter['casename'])\n>       Shop_Car().shop_car(driver,Parameter)\n\ntest_main.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.shop_car.Shop_Car object at 0x000001D1EBBD2DC0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d1ada906210b70896bceae01dc4cd77a\")>\nParameter = {'assert_way': 'class name=cart-btn-count.ant-btn', 'case_no': '', 'casename': '当商品添加数量为1时无法点击-号', 'data': '', ...}\n\n    def shop_car(self, driver, Parameter):\n        casename = Parameter['casename']\n        data = Parameter['data']\n        print(data)\n        assert_way = Parameter['assert_way']\n        result = Parameter['result']\n    \n        driver.get('http://18.118.13.94:81/index')  # 打开首页\n        WebDriverWait(driver, 20, 0.2).until(lambda x: x.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div/div[2]/div[3]/div[3]/span[1]'))\n        time.sleep(1)\n        if casename == '未登录状态下点击购物车页面跳转到登录页面成功':\n            Common().Restore_environment(driver)\n            time.sleep(1)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div/div[2]/div[3]/div[3]/span[1]').click()\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(text)\n            assert text == result\n        else:\n            Common().is_login(driver, useraccount='979172251@qq.com', password='a123456')\n            time.sleep(2)\n            if casename == '首页显示购物车图标，点击购物车，页面跳转到购物车页面':\n                info = driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div/div[2]/div[3]/div[3]/span[1]').text  # 检查是否存在购物车按钮\n                print(info)\n                goods_number = driver.find_element(by='class name', value='num').text       #获取购物车小图标显示数量\n                print(goods_number)\n                assert info == 'Cart'\n                driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div/div[2]/div[3]/div[3]/span[1]').click()     #点击购物车\n                time.sleep(2)\n                if goods_number == '0':\n                    text = driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div/div[2]/div[1]/a').text\n                    print('不存在商品')\n                    print(text)\n                    assert text == 'The shopping cart is still empty for the time being, go pick a few items right away'\n                else:\n                    print('存在商品')\n                    text = driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div/div[2]/div[1]/div[1]/div[1]/div[1]/span').text\n                    assert text == 'Shopping cart'\n            elif casename == '购物车内无商品时点击相关文字跳转到首页成功':\n                goods_number = driver.find_element(by='class name', value='num').text  # 判断购物车是否有商品\n                if goods_number != '0':  # 如果商品数量不为0，删除该账户购物车商品数据\n                    print('存在商品，删除中')\n                    Mysql().drop_table(user=\"root\", pwd=\"OKmarts888.,\", host=\"18.118.13.94\", db=\"okmarts\", port=3306,\n                                       sql=\"DELETE FROM shopping_cart WHERE userid='1506910015154425856';\")\n                    time.sleep(1)\n                else:\n                    pass\n                driver.find_element(by='class name', value='num').click()\n                time.sleep(2)\n                text = driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div/div[2]/div[1]/a').text\n                print(text)\n                assert text == 'The shopping cart is still empty for the time being, go pick a few items right away'\n                driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div/div[2]/div[1]/a').click()\n                time.sleep(2)\n                text1 = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                            value=f\"{assert_way.split('=', 1)[1]}\").text\n                assert text1 == result\n            elif casename == '当商品添加数量为1时无法点击-号':\n                Mysql().drop_table(user=\"root\", pwd=\"OKmarts888.,\", host=\"18.118.13.94\", db=\"okmarts\", port=3306,\n                                   sql=\"DELETE FROM shopping_cart WHERE userid='1506910015154425856';\")\n                time.sleep(1)\n                self.add_goods_to_shopcar(driver)  # 加入商品至购物车\n                try:\n                    info = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").get_attribute(\"disabled\")\n                    print(info)\n                    assert info == result\n                except:\n>                   assert False\nE                   AssertionError\n\n..\\mode\\shop_car.py:85: AssertionError"}, "steps": [{"name": "添加失败截图...", "status": "passed", "attachments": [{"name": "失败截图", "source": "7cb03a0f-9c37-4e38-957c-a9280d615a7c-attachment.png", "type": "image/png"}], "start": 1652158137294, "stop": 1652158137404}], "attachments": [{"name": "stdout", "source": "db7ef4e4-7481-4f60-af43-ad598832a6e4-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "Parameter", "value": "{'case_no': '', 'casename': '当商品添加数量为1时无法点击-号', 'mode': '购物车', 'data': '', 'assert_way': 'class name=cart-btn-count.ant-btn', 'result': 'true'}"}], "start": 1652158125271, "stop": 1652158137251, "uuid": "223dc03a-7eb2-45a6-a767-6f6862f9e9bc", "historyId": "757282e085c11e8969f84e0e5cc6b3da", "testCaseId": "001d4057b59b173ed0477a06c6b1ae9c", "fullName": "test_main.Test_Main#test_shop_car", "labels": [{"name": "feature", "value": "购物车"}, {"name": "suite", "value": "test_main"}, {"name": "subSuite", "value": "Test_Main"}, {"name": "host", "value": "DESKTOP-NB3FDE0"}, {"name": "thread", "value": "24552-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_main"}]}