{
  "uid" : "6ba50ee3beefab59",
  "name" : "使用Quality issues提交退货单成功",
  "fullName" : "test_main.Test_Main#test_my_order",
  "historyId" : "bc6c1d212558f32799a78fbc1009802b",
  "time" : {
    "start" : 1651196412239,
    "stop" : 1651196441557,
    "duration" : 29318
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_main.Test_Main object at 0x0000026706683BB0>\ndriver = <selenium.webdriver.edge.webdriver.WebDriver (session=\"af0f3e9a3d5a466b0b21086de1924a14\")>\nParameter = {'assert_way': 'xpath=/html/body/div[2]/span/div/div/div/span', 'case_no': '', 'casename': '使用Quality issues提交退货单成功', 'data': 'reason=Quality issues\\ntext=123412412\\nimg=C:\\\\Users\\\\admin\\\\Desktop\\\\Lipton-logo.jpg', ...}\n\n    @allure.feature('订单管理')\n    @pytest.mark.parametrize('Parameter', case_infos['my_order'], ids=casename_infos['my_order'])\n    def test_my_order(self, driver, Parameter):\n        allure.dynamic.title(Parameter['casename'])\n>       My_Order().my_order(driver,Parameter)\n\ntest_main.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.my_order.My_Order object at 0x0000026705E1D1F0>\ndriver = <selenium.webdriver.edge.webdriver.WebDriver (session=\"af0f3e9a3d5a466b0b21086de1924a14\")>\nParameter = {'assert_way': 'xpath=/html/body/div[2]/span/div/div/div/span', 'case_no': '', 'casename': '使用Quality issues提交退货单成功', 'data': 'reason=Quality issues\\ntext=123412412\\nimg=C:\\\\Users\\\\admin\\\\Desktop\\\\Lipton-logo.jpg', ...}\n\n    def my_order(self, driver, Parameter):\n        casename = Parameter['casename']\n        data = Parameter['data']\n        print(data)\n        assert_way = Parameter['assert_way']\n        result = Parameter['result']\n    \n        driver.get('http://18.118.13.94:81/index')  # 打开首页\n        time.sleep(1)\n        Common().is_login(driver, useraccount='979172251@qq.com', password='a123456')  # 检测是否登录\n        time.sleep(1)\n        driver.find_element(by='css selector', value='#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1)').click()  # 点击头像\n        time.sleep(2)\n        if casename == '点击个人中心Order record 订单成功显示':\n            print('通道1')\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").is_displayed()\n            print(text)\n            assert text == result\n        elif casename == '点击订单中的商品名称跳转商品详情成功':\n            print('通道2 ')\n            goods_name = driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[3]/div[1]/div/div[1]/div[2]/div/div[2]/div[1]/div[1]/div/a').text\n            print(goods_name)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[3]/div[1]/div/div[1]/div[2]/div/div[2]/div[1]/div[1]/div/a').click()  # 点击商品名称\n            time.sleep(2)\n            buy_now = driver.find_elements(by='class name', value='atn-btn-orange.ant-btn.ant-btn-block')[1].text  # 获取buy_now\n            # 文本 确认是在商品详情页面\n            print(buy_now)\n            assert buy_now == 'Buy now'\n    \n            goods_name1 = driver.find_element(by='class name', value='title.text-black.margin-bottom-sm').text  # 获取详情页面 商品名称\n            assert goods_name == goods_name1\n        elif casename == \"点击查看物流查看成功\":\n            print('通道3')\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[3]/div[1]/div/div[1]/div[2]/div/div[2]/div[1]/div[4]/a').click()  # 点击物流按钮\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(text)\n            assert text == result\n        elif casename == '未支付订单点击未支付跳转到支付页面':\n            print('通道4')\n            n = 0  # 判断是否找到\n            page = 1  # 判断所处页数\n            while True:\n                n = self.find_Unpaid(driver, n)\n                print(f'n 为 {n} ')\n                if n == 0:  # 如果循环后没有找到 点击下一页进行查找\n                    print(f'第{page}未找到待支付订单数据')\n                    # 查询该页面是否为最后一页\n                    try:\n                        # 移动到翻页处\n                        Common().huadong(driver, by='class name', value='ant-pagination-item-link')\n                        # 先判断下一页按钮状态 如果为true 说明是最后一页\n                        info = driver.find_element(by='class name', value='ant-pagination-disabled.ant-pagination-next').get_attribute('aria-disabled')\n                        if info == \"true\":\n                            print('此页为最后一页')\n                            break\n                    except NoSuchElementException:\n                        print('不是最后一页')\n                        # 获取next 元素属性，检测是否为最后一页\n                        driver.find_element(by='class name', value='ant-pagination-disabled.ant-pagination-next').click()  # 点击下一页\n                        time.sleep(2)\n                        page += 1\n                else:  # 如果找到了-->\n                    print(f'第{page}页存在待支付数据')\n                    break\n            if n == 0:\n                print('该账户不存在待支付数据')\n                pass\n            else:\n                time.sleep(2)\n                # 获取待支付页面 断言文本\n                text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n                print(text)\n                assert text == result\n        elif casename == '点击order data可以根据订单时间进行排序':\n            Common().huadong(driver, by='class name', value='text-tit-lg.flex')  # 滑动到订单最上方\n            time.sleep(1)\n            element = driver.find_element(by='css selector',\n                                          value='#app > div > div.ui-container > div.content.my-center-form > div > div.record_out > div.table-out > div > div.title.flex.align-center > div:nth-child(2) > svg')\n            info = element.get_attribute('p-id')\n            self.assert_time_desc(driver, info)\n            time.sleep(1)\n            element.click()\n            info2 = element.get_attribute('p-id')\n            if info2 == info:\n                print('点击后未发生变化')\n                element.click()  # 再次点击\n                time.sleep(1)\n                info3 = element.get_attribute('p-id')\n                self.assert_time_desc(driver, info3)\n            else:\n                self.assert_time_desc(driver, info2)\n        elif casename == '点击Total price可以根据订单金额进行排序':\n            Common().huadong(driver, by='class name', value='text-tit-lg.flex')  # 滑动到订单最上方\n            time.sleep(1)\n            element = driver.find_element(by='css selector', value='#app > div > div.ui-container > div.content.my-center-form > div > div.record_out > div.table-out '\n                                                                   '> div > div.title.flex.align-center > div:nth-child(3) > svg')\n            info = element.get_attribute('p-id')\n            self.assert_price_desc(driver, info)\n            time.sleep(1)\n            element.click()\n            info2 = element.get_attribute('p-id')\n            if info2 == info:\n                print('点击后未发生变化')\n                element.click()\n                time.sleep(1)\n                info3 = element.get_attribute('p-id')\n                self.assert_price_desc(driver, info3)\n            else:\n                self.assert_price_desc(driver, info2)\n        elif casename == '通过关键字及全文查找可以成功查询相同名称的订单':\n            Common().huadong(driver, by='class name', value='text-tit-lg.flex')  # 滑动到订单最上方\n            time.sleep(1)\n            try:\n                info = driver.find_element(by='css selector',\n                                           value='#app > div > div.ui-container > div.content.my-center-form > div > div.record_out > div.table-out > div > '\n                                                 'div.tableData > div:nth-child(1) > div.item.width-32.name > div > a').text\n                print(info)\n            except NoSuchElementException:\n                print('未找到订单数据')\n                raise AssertionError\n    \n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[3]/div[1]/div/div[1]/div[1]/div[2]/span/input').send_keys(info)  # 搜索栏输入名字\n            driver.find_element(by='class name', value='anticon.anticon-search.ant-input-search-icon').click()  # 点击搜索按钮\n            time.sleep(2)\n            elements = driver.find_elements(by='css selector', value='div[class=\"item width-32 name\"] > div > a')\n            erro = 0\n            for element in elements:\n                print(element.text)\n                if info in element.text:\n                    pass\n                else:\n                    erro += 1\n            if erro == 0:\n                assert True\n            else:\n                assert False\n        elif casename == '已签收订单点击退货申请进入退货页面成功':\n            n = self.go_return_goods(driver)\n            if n == 0:\n                print('该账户不存在已签收数据')\n                pass\n            else:\n                time.sleep(2)\n                # 获取待支付页面 断言文本\n                try:\n                    text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n                    print(text)\n                    assert text == result\n                except:\n                    raise AssertionError\n        elif '提交退货单' in casename:\n            n = self.go_return_goods(driver)\n            if n == 0:\n                print('该账户不存在已签收数据')\n                pytest.skip(msg=\"未找到相关数据\")\n            else:\n                time.sleep(2)\n                Reasons_for_return = data.split('\\n')[0].split('=')[-1]\n                print(Reasons_for_return)\n                reason = data.split('\\n')[1].split('=')[-1]\n                img = data.split('\\n')[2].split('=')[-1]\n                if Reasons_for_return == 'Quality issues':\n                    pass\n                elif Reasons_for_return =='Wrong order inform ation':\n                    driver.find_elements(by='class name',value='ant-select-selection__rendered')[1].click()\n                    time.sleep(1)\n                    driver.find_elements(by=\"class name\",value='ant-select-dropdown-menu-item')[1].click()   #点击第2个\n                elif Reasons_for_return == 'Model error':\n                    driver.find_elements(by='class name', value='ant-select-selection__rendered')[1].click()\n                    time.sleep(1)\n                    driver.find_elements(by=\"class name\", value='ant-select-dropdown-menu-item')[2].click()  # 点击第3个\n                elif Reasons_for_return == 'other':\n                    driver.find_elements(by='class name', value='ant-select-selection__rendered')[1].click()\n                    time.sleep(1)\n                    driver.find_elements(by=\"class name\", value='ant-select-dropdown-menu-item')[3].click()  # 点击第4个\n                time.sleep(1)\n    \n                print(reason)\n                driver.find_element(by='class name',value='tuik_text').send_keys(reason)\n                print(img)\n                if img == 'null':\n                    print('不上传图片')\n                    pass\n                else:\n                    driver.find_element(by='class name',value='ant-upload').click() #点击上传\n                    time.sleep(2)\n                    pk = PyKeyboard()\n                     # 实例化\n                    pk.type_string(rf\"{img}\")\n                    time.sleep(0.5)\n                    pk.press_key(pk.enter_key)  # 按压\n                    pk.release_key(pk.enter_key)  # 释放\n                    pk.press_key(pk.enter_key)  # 按压\n                    pk.release_key(pk.enter_key) # 释放\n                    WebDriverWait(driver,30,0.2).until(lambda x: x.find_element(by='class name',value='ant-upload-list-item-thumbnail'))\n                    time.sleep(1)\n    \n                driver.find_element(by='class name',value='atn-btn-orange.ant-btn').click() #点击提交\n                time.sleep(1.5)\n                text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                           value=f\"{assert_way.split('=', 1)[1]}\").text\n                print(text)\n>               assert text == result\nE               AssertionError\n\n..\\mode\\my_order.py:224: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "driver",
    "time" : {
      "start" : 1651193945071,
      "stop" : 1651193947387,
      "duration" : 2316
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1651193947388,
      "stop" : 1651193947388,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_main.Test_Main object at 0x0000026706683BB0>\ndriver = <selenium.webdriver.edge.webdriver.WebDriver (session=\"af0f3e9a3d5a466b0b21086de1924a14\")>\nParameter = {'assert_way': 'xpath=/html/body/div[2]/span/div/div/div/span', 'case_no': '', 'casename': '使用Quality issues提交退货单成功', 'data': 'reason=Quality issues\\ntext=123412412\\nimg=C:\\\\Users\\\\admin\\\\Desktop\\\\Lipton-logo.jpg', ...}\n\n    @allure.feature('订单管理')\n    @pytest.mark.parametrize('Parameter', case_infos['my_order'], ids=casename_infos['my_order'])\n    def test_my_order(self, driver, Parameter):\n        allure.dynamic.title(Parameter['casename'])\n>       My_Order().my_order(driver,Parameter)\n\ntest_main.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.my_order.My_Order object at 0x0000026705E1D1F0>\ndriver = <selenium.webdriver.edge.webdriver.WebDriver (session=\"af0f3e9a3d5a466b0b21086de1924a14\")>\nParameter = {'assert_way': 'xpath=/html/body/div[2]/span/div/div/div/span', 'case_no': '', 'casename': '使用Quality issues提交退货单成功', 'data': 'reason=Quality issues\\ntext=123412412\\nimg=C:\\\\Users\\\\admin\\\\Desktop\\\\Lipton-logo.jpg', ...}\n\n    def my_order(self, driver, Parameter):\n        casename = Parameter['casename']\n        data = Parameter['data']\n        print(data)\n        assert_way = Parameter['assert_way']\n        result = Parameter['result']\n    \n        driver.get('http://18.118.13.94:81/index')  # 打开首页\n        time.sleep(1)\n        Common().is_login(driver, useraccount='979172251@qq.com', password='a123456')  # 检测是否登录\n        time.sleep(1)\n        driver.find_element(by='css selector', value='#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1)').click()  # 点击头像\n        time.sleep(2)\n        if casename == '点击个人中心Order record 订单成功显示':\n            print('通道1')\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").is_displayed()\n            print(text)\n            assert text == result\n        elif casename == '点击订单中的商品名称跳转商品详情成功':\n            print('通道2 ')\n            goods_name = driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[3]/div[1]/div/div[1]/div[2]/div/div[2]/div[1]/div[1]/div/a').text\n            print(goods_name)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[3]/div[1]/div/div[1]/div[2]/div/div[2]/div[1]/div[1]/div/a').click()  # 点击商品名称\n            time.sleep(2)\n            buy_now = driver.find_elements(by='class name', value='atn-btn-orange.ant-btn.ant-btn-block')[1].text  # 获取buy_now\n            # 文本 确认是在商品详情页面\n            print(buy_now)\n            assert buy_now == 'Buy now'\n    \n            goods_name1 = driver.find_element(by='class name', value='title.text-black.margin-bottom-sm').text  # 获取详情页面 商品名称\n            assert goods_name == goods_name1\n        elif casename == \"点击查看物流查看成功\":\n            print('通道3')\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[3]/div[1]/div/div[1]/div[2]/div/div[2]/div[1]/div[4]/a').click()  # 点击物流按钮\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(text)\n            assert text == result\n        elif casename == '未支付订单点击未支付跳转到支付页面':\n            print('通道4')\n            n = 0  # 判断是否找到\n            page = 1  # 判断所处页数\n            while True:\n                n = self.find_Unpaid(driver, n)\n                print(f'n 为 {n} ')\n                if n == 0:  # 如果循环后没有找到 点击下一页进行查找\n                    print(f'第{page}未找到待支付订单数据')\n                    # 查询该页面是否为最后一页\n                    try:\n                        # 移动到翻页处\n                        Common().huadong(driver, by='class name', value='ant-pagination-item-link')\n                        # 先判断下一页按钮状态 如果为true 说明是最后一页\n                        info = driver.find_element(by='class name', value='ant-pagination-disabled.ant-pagination-next').get_attribute('aria-disabled')\n                        if info == \"true\":\n                            print('此页为最后一页')\n                            break\n                    except NoSuchElementException:\n                        print('不是最后一页')\n                        # 获取next 元素属性，检测是否为最后一页\n                        driver.find_element(by='class name', value='ant-pagination-disabled.ant-pagination-next').click()  # 点击下一页\n                        time.sleep(2)\n                        page += 1\n                else:  # 如果找到了-->\n                    print(f'第{page}页存在待支付数据')\n                    break\n            if n == 0:\n                print('该账户不存在待支付数据')\n                pass\n            else:\n                time.sleep(2)\n                # 获取待支付页面 断言文本\n                text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n                print(text)\n                assert text == result\n        elif casename == '点击order data可以根据订单时间进行排序':\n            Common().huadong(driver, by='class name', value='text-tit-lg.flex')  # 滑动到订单最上方\n            time.sleep(1)\n            element = driver.find_element(by='css selector',\n                                          value='#app > div > div.ui-container > div.content.my-center-form > div > div.record_out > div.table-out > div > div.title.flex.align-center > div:nth-child(2) > svg')\n            info = element.get_attribute('p-id')\n            self.assert_time_desc(driver, info)\n            time.sleep(1)\n            element.click()\n            info2 = element.get_attribute('p-id')\n            if info2 == info:\n                print('点击后未发生变化')\n                element.click()  # 再次点击\n                time.sleep(1)\n                info3 = element.get_attribute('p-id')\n                self.assert_time_desc(driver, info3)\n            else:\n                self.assert_time_desc(driver, info2)\n        elif casename == '点击Total price可以根据订单金额进行排序':\n            Common().huadong(driver, by='class name', value='text-tit-lg.flex')  # 滑动到订单最上方\n            time.sleep(1)\n            element = driver.find_element(by='css selector', value='#app > div > div.ui-container > div.content.my-center-form > div > div.record_out > div.table-out '\n                                                                   '> div > div.title.flex.align-center > div:nth-child(3) > svg')\n            info = element.get_attribute('p-id')\n            self.assert_price_desc(driver, info)\n            time.sleep(1)\n            element.click()\n            info2 = element.get_attribute('p-id')\n            if info2 == info:\n                print('点击后未发生变化')\n                element.click()\n                time.sleep(1)\n                info3 = element.get_attribute('p-id')\n                self.assert_price_desc(driver, info3)\n            else:\n                self.assert_price_desc(driver, info2)\n        elif casename == '通过关键字及全文查找可以成功查询相同名称的订单':\n            Common().huadong(driver, by='class name', value='text-tit-lg.flex')  # 滑动到订单最上方\n            time.sleep(1)\n            try:\n                info = driver.find_element(by='css selector',\n                                           value='#app > div > div.ui-container > div.content.my-center-form > div > div.record_out > div.table-out > div > '\n                                                 'div.tableData > div:nth-child(1) > div.item.width-32.name > div > a').text\n                print(info)\n            except NoSuchElementException:\n                print('未找到订单数据')\n                raise AssertionError\n    \n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[3]/div[1]/div/div[1]/div[1]/div[2]/span/input').send_keys(info)  # 搜索栏输入名字\n            driver.find_element(by='class name', value='anticon.anticon-search.ant-input-search-icon').click()  # 点击搜索按钮\n            time.sleep(2)\n            elements = driver.find_elements(by='css selector', value='div[class=\"item width-32 name\"] > div > a')\n            erro = 0\n            for element in elements:\n                print(element.text)\n                if info in element.text:\n                    pass\n                else:\n                    erro += 1\n            if erro == 0:\n                assert True\n            else:\n                assert False\n        elif casename == '已签收订单点击退货申请进入退货页面成功':\n            n = self.go_return_goods(driver)\n            if n == 0:\n                print('该账户不存在已签收数据')\n                pass\n            else:\n                time.sleep(2)\n                # 获取待支付页面 断言文本\n                try:\n                    text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n                    print(text)\n                    assert text == result\n                except:\n                    raise AssertionError\n        elif '提交退货单' in casename:\n            n = self.go_return_goods(driver)\n            if n == 0:\n                print('该账户不存在已签收数据')\n                pytest.skip(msg=\"未找到相关数据\")\n            else:\n                time.sleep(2)\n                Reasons_for_return = data.split('\\n')[0].split('=')[-1]\n                print(Reasons_for_return)\n                reason = data.split('\\n')[1].split('=')[-1]\n                img = data.split('\\n')[2].split('=')[-1]\n                if Reasons_for_return == 'Quality issues':\n                    pass\n                elif Reasons_for_return =='Wrong order inform ation':\n                    driver.find_elements(by='class name',value='ant-select-selection__rendered')[1].click()\n                    time.sleep(1)\n                    driver.find_elements(by=\"class name\",value='ant-select-dropdown-menu-item')[1].click()   #点击第2个\n                elif Reasons_for_return == 'Model error':\n                    driver.find_elements(by='class name', value='ant-select-selection__rendered')[1].click()\n                    time.sleep(1)\n                    driver.find_elements(by=\"class name\", value='ant-select-dropdown-menu-item')[2].click()  # 点击第3个\n                elif Reasons_for_return == 'other':\n                    driver.find_elements(by='class name', value='ant-select-selection__rendered')[1].click()\n                    time.sleep(1)\n                    driver.find_elements(by=\"class name\", value='ant-select-dropdown-menu-item')[3].click()  # 点击第4个\n                time.sleep(1)\n    \n                print(reason)\n                driver.find_element(by='class name',value='tuik_text').send_keys(reason)\n                print(img)\n                if img == 'null':\n                    print('不上传图片')\n                    pass\n                else:\n                    driver.find_element(by='class name',value='ant-upload').click() #点击上传\n                    time.sleep(2)\n                    pk = PyKeyboard()\n                     # 实例化\n                    pk.type_string(rf\"{img}\")\n                    time.sleep(0.5)\n                    pk.press_key(pk.enter_key)  # 按压\n                    pk.release_key(pk.enter_key)  # 释放\n                    pk.press_key(pk.enter_key)  # 按压\n                    pk.release_key(pk.enter_key) # 释放\n                    WebDriverWait(driver,30,0.2).until(lambda x: x.find_element(by='class name',value='ant-upload-list-item-thumbnail'))\n                    time.sleep(1)\n    \n                driver.find_element(by='class name',value='atn-btn-orange.ant-btn').click() #点击提交\n                time.sleep(1.5)\n                text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                           value=f\"{assert_way.split('=', 1)[1]}\").text\n                print(text)\n>               assert text == result\nE               AssertionError\n\n..\\mode\\my_order.py:224: AssertionError",
    "steps" : [ {
      "name" : "添加失败截图...",
      "time" : {
        "start" : 1651196441576,
        "stop" : 1651196441737,
        "duration" : 161
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "79cf94e0c2f37fc5",
        "name" : "失败截图",
        "source" : "79cf94e0c2f37fc5.png",
        "type" : "image/png",
        "size" : 73529
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 1
    } ],
    "attachments" : [ {
      "uid" : "cf7b88f65564197b",
      "name" : "stdout",
      "source" : "cf7b88f65564197b.txt",
      "type" : "text/plain",
      "size" : 1006
    } ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 2
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1651196719785,
      "stop" : 1651196720482,
      "duration" : 697
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "driver::0",
    "time" : {
      "start" : 1651196720485,
      "stop" : 1651196720485,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "订单管理"
  }, {
    "name" : "suite",
    "value" : "test_main"
  }, {
    "name" : "subSuite",
    "value" : "Test_Main"
  }, {
    "name" : "host",
    "value" : "DESKTOP-NB3FDE0"
  }, {
    "name" : "thread",
    "value" : "23236-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_main"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "Parameter",
    "value" : "{'case_no': '', 'casename': '使用Quality issues提交退货单成功', 'mode': '订单管理', 'data': 'reason=Quality issues\\ntext=123412412\\nimg=C:\\\\Users\\\\admin\\\\Desktop\\\\Lipton-logo.jpg', 'assert_way': 'xpath=/html/body/div[2]/span/div/div/div/span', 'result': 'success'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "6ba50ee3beefab59.json",
  "parameterValues" : [ "{'case_no': '', 'casename': '使用Quality issues提交退货单成功', 'mode': '订单管理', 'data': 'reason=Quality issues\\ntext=123412412\\nimg=C:\\\\Users\\\\admin\\\\Desktop\\\\Lipton-logo.jpg', 'assert_way': 'xpath=/html/body/div[2]/span/div/div/div/span', 'result': 'success'}" ]
}