{
  "uid" : "d42148f1ab2c3fe9",
  "name" : "密码为数字+大写字母+特殊字符注册成功",
  "fullName" : "test_main.Test_Main#test_regist",
  "historyId" : "1d057baed39ed7952c8e2889bbb3bd2c",
  "time" : {
    "start" : 1650935368005,
    "stop" : 1650935395137,
    "duration" : 27132
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <okmarts_ui_test.mode.register.Regist object at 0x000001C483C4B9D0>\nParameter = {'assert_way': 'class name=text-tit-lg', 'case_no': '29', 'casename': '密码为数字+大写字母+特殊字符注册成功', 'data': 'useraccount=a883774917@163.com\\npassword=123ASD！@#', ...}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"226d56cace6127b393c0d9ae04f993e7\")>\n\n    def regist(self, Parameter, driver):\n        casename = Parameter['casename']\n        mode = Parameter['mode']\n        data = Parameter['data'].split('\\n')\n        if casename == '用户名邮箱为空下一步操作置灰':\n            useraccount = data[0].split('=')[-1]\n        elif casename == '输入已存在的用户名注册失败':\n            useraccount = '979172251@qq.com'\n        else:\n            useraccount = Common().random_email_account()\n    \n        assert_way = Parameter['assert_way']\n        result = Parameter['result']\n        driver.get('http://18.118.13.94:81/my/register')\n        time.sleep(0.5)\n        driver.find_element(by='id', value='register_step_1_userAccount').send_keys(useraccount)\n    \n        if casename == '不勾选用户协议注册失败':\n            driver.find_element(by='class name', value='ant-checkbox').click()\n        else:\n            pass\n    \n        driver.find_element(by='xpath',\n                            value='//*[@id=\"app\"]/div/div[1]/div[2]/form/div[3]/div/div/span/div/button/a').click()  # 点击下一步发送验证码\n    \n        if casename == '用户名邮箱为空下一步操作置灰':\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").get_attribute('disabled')\n            print('通道1')\n            print(text)\n            assert text == result\n        elif casename == '关闭验证码页面成功':\n            time.sleep(3)\n            # print(self.dr.find_element(by='class name', value='ant-modal-body').is_displayed())\n            driver.find_element(by='class name', value='anticon.anticon-close.ant-modal-close-icon').click()\n            time.sleep(0.5)\n            assert driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").is_displayed() is not result\n        elif casename == '使用过期验证码验证失败':\n            code = Get_Code().wangyi(username=useraccount, password='Qwe3541118', name='hydraulic', no=2)  # 获取验证码\n            self.input_code(driver, code)\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道2')\n            print(text)\n            assert text == result\n        elif casename == '输入错误验证码注册失败':\n            time.sleep(2)\n            self.input_code(driver, ['111111'])\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道3')\n            print(text)\n            assert text == result\n        elif casename == '超时后再次发送验证码成功':\n            time.sleep(63)\n            driver.find_element(by='xpath', value='/html/body/div[2]/div/div[2]/div/div[2]/div/div/div[2]/a').click()\n            time.sleep(3)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道4')\n            print(text)\n            assert text == result\n        elif casename in ['邮箱不含@弹出错误提示', '输入已存在的用户名注册失败', '不勾选用户协议注册失败']:\n            time.sleep(1)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道5')\n            print(text)\n            assert text == result\n        elif casename == '注册完成后领取优惠卷成功':\n            self.regist_mode1(useraccount, driver, data)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div[5]/img').click()  # 点击礼物箱\n            time.sleep(0.2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            text = driver.find_element(by='xpath', value='/html/body/div[2]/span/div/div/div/span').text\n            print(text)\n            Common().login(driver,useraccount,password=data[1].split('=')[-1])\n            driver.find_element(by='css selector', value='#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1) > span').click()\n            time.sleep(1.5)\n            coupons_text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道6')\n            print(coupons_text)\n            assert text == 'success' and coupons_text == result\n        elif casename == '领取优惠卷回退页面再次领取失败':\n            self.regist_mode1(useraccount, driver, data)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div[5]/img').click()  # 点击礼物箱\n            time.sleep(0.2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            driver.back()\n            time.sleep(2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            Common().login(driver,useraccount,password=data[1].split('=')[-1])   #登录\n            driver.find_element(by='css selector', value='#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1) > span > p').click()\n            time.sleep(1.5)\n            coupons_text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道7')\n            print(coupons_text)\n            assert coupons_text == result\n        elif casename == '不进行验证注册失败':\n            time.sleep(10)      #等待验证码发送至邮箱\n            code = Get_Code().wangyi(username=useraccount, password='Qwe3541118', name='hydraulic', no=1)  # 获取验证码\n            print(code[0])\n            self.input_code(driver, code)\n            WebDriverWait(driver, 30, 0.2).until(lambda x: x.find_element_by_xpath(\n                '//*[@id=\"app\"]/div/div[1]/div[2]/form/div[1]/div/div/span/span/input'))  # 显示等待\n            driver.find_element(by='xpath',\n                                value='//*[@id=\"app\"]/div/div[1]/div[2]/form/div[1]/div/div/span/span/input').send_keys(\n                data[1].split('=')[-1])  # 输入密码\n            time.sleep(1)\n            driver.find_element(by=\"xpath\",\n                                value='//*[@id=\"app\"]/div/div[1]/div[2]/form/div[3]/div/div/span/div/a').click()  # 点击下一步\n            time.sleep(1.5)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(text)\n            print('通道0')\n            print(text)\n            assert text == result\n        else:\n            try:\n>               self.regist_mode1(useraccount, driver, data)\n\n..\\mode\\register.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.register.Regist object at 0x000001C483C4B9D0>\nuseraccount = 'a883774916@163.com'\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"226d56cace6127b393c0d9ae04f993e7\")>\ndata = ['useraccount=a883774917@163.com', 'password=123ASD！@#']\n\n    def regist_mode1(self, useraccount, driver, data):\n        time.sleep(10)\n>       code = Get_Code().wangyi(username=useraccount, password='Qwe3541118', name='hydraulic', no=1)  # 获取验证码\n\n..\\mode\\register.py:181: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.get_code.Get_Code object at 0x000001C483C19040>\nusername = 'a883774916@163.com', password = 'Qwe3541118', name = 'hydraulic'\nno = 1\n\n    def wangyi(self, username, password, name, no:int):\n    \n        \"\"\"\n        网易邮箱获取验证码\n        :param username: 邮箱账户\n        :param password: 邮箱密码\n        :param name:  发件人 hydraulic\n        :param no : 第几封排序邮件 no>=1\n        :return:\n        \"\"\"\n        option = webdriver.ChromeOptions()\n        option.add_experimental_option(\"detach\", True)\n    \n        self.dr.maximize_window()  # 窗口最大化\n        self.dr.get(\"https://mail.163.com/\")\n        time.sleep(2)\n        iframe = self.dr.find_element(by=\"xpath\",\n                                      value=\"/html/body/div[2]/div[3]/div[1]/div/div[4]/div[1]/div[1]/iframe\")\n        self.dr.switch_to.frame(iframe)  # 切换至内嵌页面\n        time.sleep(0.5)\n        self.dr.find_element(by=\"name\", value=\"email\").clear()  # 清除内容\n        time.sleep(0.5)\n        self.dr.find_element(by=\"name\", value=\"email\").send_keys(username)  # 输入账户\n        self.dr.find_element(by=\"name\", value=\"password\").clear()  # 清除内容\n        time.sleep(0.5)\n        self.dr.find_element(by=\"name\", value=\"password\").send_keys(password)\n        self.dr.find_element(by=\"id\", value=\"dologin\").click()  # 进入邮箱首页\n        self.dr.switch_to.parent_frame()  # 切回父级页面\n        time.sleep(2)\n        self.dr.find_element(By.ID, \"_mail_component_147_147\").click()  # 点击收件箱\n        time.sleep(2)\n        count = self.dr.find_elements(By.CLASS_NAME, \"nl0.hA0.ck0\")\n        # print(len(count))  # 获取存在的未读邮件数量\n        n = 1\n        for i in range(len(count)):\n            emailname = self.dr.find_elements(By.CLASS_NAME, \"dP0\")[i].text  # 遍历未读邮件邮件名\n            # print(i)\n            # print(emailname)\n            # print(name)\n            if emailname == name:  # 如果信息名为想匹配的账户名称则执行下一步操作\n                if n == no:\n                    self.dr.find_elements(By.CLASS_NAME, \"dP0\")[i].click()  # 点击邮件查看详情\n                    time.sleep(1)\n                    iframe = self.dr.find_element(By.XPATH,\n                                                  \"/html/body/div[2]/div[1]/div[3]/div/div[1]/div[6]/div/iframe\")  #\n                    # 定位内嵌页面\n                    self.dr.switch_to.frame(iframe)  # 切换到内嵌页面\n                    time.sleep(1)\n                    res = self.dr.find_element(By.CLASS_NAME,\n                                               'netease_mail_readhtml.netease_mail_readhtml_webmail').text  # 获取整个邮件信息\n                    # print(res)\n                    self.dr.switch_to.parent_frame()  # 切回父级界面\n                    code = re.findall(pattern=\"\\d+\", string=res)  # 使用正则表达式获取邮箱验证码\n                    # print(code)\n                    break  # 获取完成退出遍历\n                else:\n                    print(f'应为第{no}封符合需求的邮件，此次跳过')\n                    n += 1\n        self.dr.quit()  # 关闭浏览器\n>       return code\nE       UnboundLocalError: local variable 'code' referenced before assignment\n\n..\\mode\\get_code.py:117: UnboundLocalError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_main.Test_Main object at 0x000001C483C4B2E0>\nParameter = {'assert_way': 'class name=text-tit-lg', 'case_no': '29', 'casename': '密码为数字+大写字母+特殊字符注册成功', 'data': 'useraccount=a883774917@163.com\\npassword=123ASD！@#', ...}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"226d56cace6127b393c0d9ae04f993e7\")>\n\n    @allure.feature('注册')\n    @pytest.mark.parametrize('Parameter', case_infos['registe'], ids=casename_infos['registe'])\n    def test_regist(self, Parameter, driver):\n        allure.dynamic.title(Parameter['casename'])  # 测试用例名称\n>       Regist().regist(Parameter, driver)\n\ntest_main.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.register.Regist object at 0x000001C483C4B9D0>\nParameter = {'assert_way': 'class name=text-tit-lg', 'case_no': '29', 'casename': '密码为数字+大写字母+特殊字符注册成功', 'data': 'useraccount=a883774917@163.com\\npassword=123ASD！@#', ...}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"226d56cace6127b393c0d9ae04f993e7\")>\n\n    def regist(self, Parameter, driver):\n        casename = Parameter['casename']\n        mode = Parameter['mode']\n        data = Parameter['data'].split('\\n')\n        if casename == '用户名邮箱为空下一步操作置灰':\n            useraccount = data[0].split('=')[-1]\n        elif casename == '输入已存在的用户名注册失败':\n            useraccount = '979172251@qq.com'\n        else:\n            useraccount = Common().random_email_account()\n    \n        assert_way = Parameter['assert_way']\n        result = Parameter['result']\n        driver.get('http://18.118.13.94:81/my/register')\n        time.sleep(0.5)\n        driver.find_element(by='id', value='register_step_1_userAccount').send_keys(useraccount)\n    \n        if casename == '不勾选用户协议注册失败':\n            driver.find_element(by='class name', value='ant-checkbox').click()\n        else:\n            pass\n    \n        driver.find_element(by='xpath',\n                            value='//*[@id=\"app\"]/div/div[1]/div[2]/form/div[3]/div/div/span/div/button/a').click()  # 点击下一步发送验证码\n    \n        if casename == '用户名邮箱为空下一步操作置灰':\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").get_attribute('disabled')\n            print('通道1')\n            print(text)\n            assert text == result\n        elif casename == '关闭验证码页面成功':\n            time.sleep(3)\n            # print(self.dr.find_element(by='class name', value='ant-modal-body').is_displayed())\n            driver.find_element(by='class name', value='anticon.anticon-close.ant-modal-close-icon').click()\n            time.sleep(0.5)\n            assert driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").is_displayed() is not result\n        elif casename == '使用过期验证码验证失败':\n            code = Get_Code().wangyi(username=useraccount, password='Qwe3541118', name='hydraulic', no=2)  # 获取验证码\n            self.input_code(driver, code)\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道2')\n            print(text)\n            assert text == result\n        elif casename == '输入错误验证码注册失败':\n            time.sleep(2)\n            self.input_code(driver, ['111111'])\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道3')\n            print(text)\n            assert text == result\n        elif casename == '超时后再次发送验证码成功':\n            time.sleep(63)\n            driver.find_element(by='xpath', value='/html/body/div[2]/div/div[2]/div/div[2]/div/div/div[2]/a').click()\n            time.sleep(3)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道4')\n            print(text)\n            assert text == result\n        elif casename in ['邮箱不含@弹出错误提示', '输入已存在的用户名注册失败', '不勾选用户协议注册失败']:\n            time.sleep(1)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道5')\n            print(text)\n            assert text == result\n        elif casename == '注册完成后领取优惠卷成功':\n            self.regist_mode1(useraccount, driver, data)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div[5]/img').click()  # 点击礼物箱\n            time.sleep(0.2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            text = driver.find_element(by='xpath', value='/html/body/div[2]/span/div/div/div/span').text\n            print(text)\n            Common().login(driver,useraccount,password=data[1].split('=')[-1])\n            driver.find_element(by='css selector', value='#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1) > span').click()\n            time.sleep(1.5)\n            coupons_text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道6')\n            print(coupons_text)\n            assert text == 'success' and coupons_text == result\n        elif casename == '领取优惠卷回退页面再次领取失败':\n            self.regist_mode1(useraccount, driver, data)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div[5]/img').click()  # 点击礼物箱\n            time.sleep(0.2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            driver.back()\n            time.sleep(2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            Common().login(driver,useraccount,password=data[1].split('=')[-1])   #登录\n            driver.find_element(by='css selector', value='#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1) > span > p').click()\n            time.sleep(1.5)\n            coupons_text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道7')\n            print(coupons_text)\n            assert coupons_text == result\n        elif casename == '不进行验证注册失败':\n            time.sleep(10)      #等待验证码发送至邮箱\n            code = Get_Code().wangyi(username=useraccount, password='Qwe3541118', name='hydraulic', no=1)  # 获取验证码\n            print(code[0])\n            self.input_code(driver, code)\n            WebDriverWait(driver, 30, 0.2).until(lambda x: x.find_element_by_xpath(\n                '//*[@id=\"app\"]/div/div[1]/div[2]/form/div[1]/div/div/span/span/input'))  # 显示等待\n            driver.find_element(by='xpath',\n                                value='//*[@id=\"app\"]/div/div[1]/div[2]/form/div[1]/div/div/span/span/input').send_keys(\n                data[1].split('=')[-1])  # 输入密码\n            time.sleep(1)\n            driver.find_element(by=\"xpath\",\n                                value='//*[@id=\"app\"]/div/div[1]/div[2]/form/div[3]/div/div/span/div/a').click()  # 点击下一步\n            time.sleep(1.5)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(text)\n            print('通道0')\n            print(text)\n            assert text == result\n        else:\n            try:\n                self.regist_mode1(useraccount, driver, data)\n                text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                           value=f\"{assert_way.split('=', 1)[1]}\").text\n                print('通道0')\n                print(text)\n                assert text == result\n            except :\n>               raise AssertionError\nE               AssertionError\n\n..\\mode\\register.py:155: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "driver",
    "time" : {
      "start" : 1650934635879,
      "stop" : 1650934638069,
      "duration" : 2190
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1650934638069,
      "stop" : 1650934638069,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <okmarts_ui_test.mode.register.Regist object at 0x000001C483C4B9D0>\nParameter = {'assert_way': 'class name=text-tit-lg', 'case_no': '29', 'casename': '密码为数字+大写字母+特殊字符注册成功', 'data': 'useraccount=a883774917@163.com\\npassword=123ASD！@#', ...}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"226d56cace6127b393c0d9ae04f993e7\")>\n\n    def regist(self, Parameter, driver):\n        casename = Parameter['casename']\n        mode = Parameter['mode']\n        data = Parameter['data'].split('\\n')\n        if casename == '用户名邮箱为空下一步操作置灰':\n            useraccount = data[0].split('=')[-1]\n        elif casename == '输入已存在的用户名注册失败':\n            useraccount = '979172251@qq.com'\n        else:\n            useraccount = Common().random_email_account()\n    \n        assert_way = Parameter['assert_way']\n        result = Parameter['result']\n        driver.get('http://18.118.13.94:81/my/register')\n        time.sleep(0.5)\n        driver.find_element(by='id', value='register_step_1_userAccount').send_keys(useraccount)\n    \n        if casename == '不勾选用户协议注册失败':\n            driver.find_element(by='class name', value='ant-checkbox').click()\n        else:\n            pass\n    \n        driver.find_element(by='xpath',\n                            value='//*[@id=\"app\"]/div/div[1]/div[2]/form/div[3]/div/div/span/div/button/a').click()  # 点击下一步发送验证码\n    \n        if casename == '用户名邮箱为空下一步操作置灰':\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").get_attribute('disabled')\n            print('通道1')\n            print(text)\n            assert text == result\n        elif casename == '关闭验证码页面成功':\n            time.sleep(3)\n            # print(self.dr.find_element(by='class name', value='ant-modal-body').is_displayed())\n            driver.find_element(by='class name', value='anticon.anticon-close.ant-modal-close-icon').click()\n            time.sleep(0.5)\n            assert driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").is_displayed() is not result\n        elif casename == '使用过期验证码验证失败':\n            code = Get_Code().wangyi(username=useraccount, password='Qwe3541118', name='hydraulic', no=2)  # 获取验证码\n            self.input_code(driver, code)\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道2')\n            print(text)\n            assert text == result\n        elif casename == '输入错误验证码注册失败':\n            time.sleep(2)\n            self.input_code(driver, ['111111'])\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道3')\n            print(text)\n            assert text == result\n        elif casename == '超时后再次发送验证码成功':\n            time.sleep(63)\n            driver.find_element(by='xpath', value='/html/body/div[2]/div/div[2]/div/div[2]/div/div/div[2]/a').click()\n            time.sleep(3)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道4')\n            print(text)\n            assert text == result\n        elif casename in ['邮箱不含@弹出错误提示', '输入已存在的用户名注册失败', '不勾选用户协议注册失败']:\n            time.sleep(1)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道5')\n            print(text)\n            assert text == result\n        elif casename == '注册完成后领取优惠卷成功':\n            self.regist_mode1(useraccount, driver, data)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div[5]/img').click()  # 点击礼物箱\n            time.sleep(0.2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            text = driver.find_element(by='xpath', value='/html/body/div[2]/span/div/div/div/span').text\n            print(text)\n            Common().login(driver,useraccount,password=data[1].split('=')[-1])\n            driver.find_element(by='css selector', value='#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1) > span').click()\n            time.sleep(1.5)\n            coupons_text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道6')\n            print(coupons_text)\n            assert text == 'success' and coupons_text == result\n        elif casename == '领取优惠卷回退页面再次领取失败':\n            self.regist_mode1(useraccount, driver, data)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div[5]/img').click()  # 点击礼物箱\n            time.sleep(0.2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            driver.back()\n            time.sleep(2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            Common().login(driver,useraccount,password=data[1].split('=')[-1])   #登录\n            driver.find_element(by='css selector', value='#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1) > span > p').click()\n            time.sleep(1.5)\n            coupons_text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道7')\n            print(coupons_text)\n            assert coupons_text == result\n        elif casename == '不进行验证注册失败':\n            time.sleep(10)      #等待验证码发送至邮箱\n            code = Get_Code().wangyi(username=useraccount, password='Qwe3541118', name='hydraulic', no=1)  # 获取验证码\n            print(code[0])\n            self.input_code(driver, code)\n            WebDriverWait(driver, 30, 0.2).until(lambda x: x.find_element_by_xpath(\n                '//*[@id=\"app\"]/div/div[1]/div[2]/form/div[1]/div/div/span/span/input'))  # 显示等待\n            driver.find_element(by='xpath',\n                                value='//*[@id=\"app\"]/div/div[1]/div[2]/form/div[1]/div/div/span/span/input').send_keys(\n                data[1].split('=')[-1])  # 输入密码\n            time.sleep(1)\n            driver.find_element(by=\"xpath\",\n                                value='//*[@id=\"app\"]/div/div[1]/div[2]/form/div[3]/div/div/span/div/a').click()  # 点击下一步\n            time.sleep(1.5)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(text)\n            print('通道0')\n            print(text)\n            assert text == result\n        else:\n            try:\n>               self.regist_mode1(useraccount, driver, data)\n\n..\\mode\\register.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.register.Regist object at 0x000001C483C4B9D0>\nuseraccount = 'a883774916@163.com'\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"226d56cace6127b393c0d9ae04f993e7\")>\ndata = ['useraccount=a883774917@163.com', 'password=123ASD！@#']\n\n    def regist_mode1(self, useraccount, driver, data):\n        time.sleep(10)\n>       code = Get_Code().wangyi(username=useraccount, password='Qwe3541118', name='hydraulic', no=1)  # 获取验证码\n\n..\\mode\\register.py:181: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.get_code.Get_Code object at 0x000001C483C19040>\nusername = 'a883774916@163.com', password = 'Qwe3541118', name = 'hydraulic'\nno = 1\n\n    def wangyi(self, username, password, name, no:int):\n    \n        \"\"\"\n        网易邮箱获取验证码\n        :param username: 邮箱账户\n        :param password: 邮箱密码\n        :param name:  发件人 hydraulic\n        :param no : 第几封排序邮件 no>=1\n        :return:\n        \"\"\"\n        option = webdriver.ChromeOptions()\n        option.add_experimental_option(\"detach\", True)\n    \n        self.dr.maximize_window()  # 窗口最大化\n        self.dr.get(\"https://mail.163.com/\")\n        time.sleep(2)\n        iframe = self.dr.find_element(by=\"xpath\",\n                                      value=\"/html/body/div[2]/div[3]/div[1]/div/div[4]/div[1]/div[1]/iframe\")\n        self.dr.switch_to.frame(iframe)  # 切换至内嵌页面\n        time.sleep(0.5)\n        self.dr.find_element(by=\"name\", value=\"email\").clear()  # 清除内容\n        time.sleep(0.5)\n        self.dr.find_element(by=\"name\", value=\"email\").send_keys(username)  # 输入账户\n        self.dr.find_element(by=\"name\", value=\"password\").clear()  # 清除内容\n        time.sleep(0.5)\n        self.dr.find_element(by=\"name\", value=\"password\").send_keys(password)\n        self.dr.find_element(by=\"id\", value=\"dologin\").click()  # 进入邮箱首页\n        self.dr.switch_to.parent_frame()  # 切回父级页面\n        time.sleep(2)\n        self.dr.find_element(By.ID, \"_mail_component_147_147\").click()  # 点击收件箱\n        time.sleep(2)\n        count = self.dr.find_elements(By.CLASS_NAME, \"nl0.hA0.ck0\")\n        # print(len(count))  # 获取存在的未读邮件数量\n        n = 1\n        for i in range(len(count)):\n            emailname = self.dr.find_elements(By.CLASS_NAME, \"dP0\")[i].text  # 遍历未读邮件邮件名\n            # print(i)\n            # print(emailname)\n            # print(name)\n            if emailname == name:  # 如果信息名为想匹配的账户名称则执行下一步操作\n                if n == no:\n                    self.dr.find_elements(By.CLASS_NAME, \"dP0\")[i].click()  # 点击邮件查看详情\n                    time.sleep(1)\n                    iframe = self.dr.find_element(By.XPATH,\n                                                  \"/html/body/div[2]/div[1]/div[3]/div/div[1]/div[6]/div/iframe\")  #\n                    # 定位内嵌页面\n                    self.dr.switch_to.frame(iframe)  # 切换到内嵌页面\n                    time.sleep(1)\n                    res = self.dr.find_element(By.CLASS_NAME,\n                                               'netease_mail_readhtml.netease_mail_readhtml_webmail').text  # 获取整个邮件信息\n                    # print(res)\n                    self.dr.switch_to.parent_frame()  # 切回父级界面\n                    code = re.findall(pattern=\"\\d+\", string=res)  # 使用正则表达式获取邮箱验证码\n                    # print(code)\n                    break  # 获取完成退出遍历\n                else:\n                    print(f'应为第{no}封符合需求的邮件，此次跳过')\n                    n += 1\n        self.dr.quit()  # 关闭浏览器\n>       return code\nE       UnboundLocalError: local variable 'code' referenced before assignment\n\n..\\mode\\get_code.py:117: UnboundLocalError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_main.Test_Main object at 0x000001C483C4B2E0>\nParameter = {'assert_way': 'class name=text-tit-lg', 'case_no': '29', 'casename': '密码为数字+大写字母+特殊字符注册成功', 'data': 'useraccount=a883774917@163.com\\npassword=123ASD！@#', ...}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"226d56cace6127b393c0d9ae04f993e7\")>\n\n    @allure.feature('注册')\n    @pytest.mark.parametrize('Parameter', case_infos['registe'], ids=casename_infos['registe'])\n    def test_regist(self, Parameter, driver):\n        allure.dynamic.title(Parameter['casename'])  # 测试用例名称\n>       Regist().regist(Parameter, driver)\n\ntest_main.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.register.Regist object at 0x000001C483C4B9D0>\nParameter = {'assert_way': 'class name=text-tit-lg', 'case_no': '29', 'casename': '密码为数字+大写字母+特殊字符注册成功', 'data': 'useraccount=a883774917@163.com\\npassword=123ASD！@#', ...}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"226d56cace6127b393c0d9ae04f993e7\")>\n\n    def regist(self, Parameter, driver):\n        casename = Parameter['casename']\n        mode = Parameter['mode']\n        data = Parameter['data'].split('\\n')\n        if casename == '用户名邮箱为空下一步操作置灰':\n            useraccount = data[0].split('=')[-1]\n        elif casename == '输入已存在的用户名注册失败':\n            useraccount = '979172251@qq.com'\n        else:\n            useraccount = Common().random_email_account()\n    \n        assert_way = Parameter['assert_way']\n        result = Parameter['result']\n        driver.get('http://18.118.13.94:81/my/register')\n        time.sleep(0.5)\n        driver.find_element(by='id', value='register_step_1_userAccount').send_keys(useraccount)\n    \n        if casename == '不勾选用户协议注册失败':\n            driver.find_element(by='class name', value='ant-checkbox').click()\n        else:\n            pass\n    \n        driver.find_element(by='xpath',\n                            value='//*[@id=\"app\"]/div/div[1]/div[2]/form/div[3]/div/div/span/div/button/a').click()  # 点击下一步发送验证码\n    \n        if casename == '用户名邮箱为空下一步操作置灰':\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").get_attribute('disabled')\n            print('通道1')\n            print(text)\n            assert text == result\n        elif casename == '关闭验证码页面成功':\n            time.sleep(3)\n            # print(self.dr.find_element(by='class name', value='ant-modal-body').is_displayed())\n            driver.find_element(by='class name', value='anticon.anticon-close.ant-modal-close-icon').click()\n            time.sleep(0.5)\n            assert driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").is_displayed() is not result\n        elif casename == '使用过期验证码验证失败':\n            code = Get_Code().wangyi(username=useraccount, password='Qwe3541118', name='hydraulic', no=2)  # 获取验证码\n            self.input_code(driver, code)\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道2')\n            print(text)\n            assert text == result\n        elif casename == '输入错误验证码注册失败':\n            time.sleep(2)\n            self.input_code(driver, ['111111'])\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道3')\n            print(text)\n            assert text == result\n        elif casename == '超时后再次发送验证码成功':\n            time.sleep(63)\n            driver.find_element(by='xpath', value='/html/body/div[2]/div/div[2]/div/div[2]/div/div/div[2]/a').click()\n            time.sleep(3)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道4')\n            print(text)\n            assert text == result\n        elif casename in ['邮箱不含@弹出错误提示', '输入已存在的用户名注册失败', '不勾选用户协议注册失败']:\n            time.sleep(1)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道5')\n            print(text)\n            assert text == result\n        elif casename == '注册完成后领取优惠卷成功':\n            self.regist_mode1(useraccount, driver, data)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div[5]/img').click()  # 点击礼物箱\n            time.sleep(0.2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            text = driver.find_element(by='xpath', value='/html/body/div[2]/span/div/div/div/span').text\n            print(text)\n            Common().login(driver,useraccount,password=data[1].split('=')[-1])\n            driver.find_element(by='css selector', value='#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1) > span').click()\n            time.sleep(1.5)\n            coupons_text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道6')\n            print(coupons_text)\n            assert text == 'success' and coupons_text == result\n        elif casename == '领取优惠卷回退页面再次领取失败':\n            self.regist_mode1(useraccount, driver, data)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div[5]/img').click()  # 点击礼物箱\n            time.sleep(0.2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            driver.back()\n            time.sleep(2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            Common().login(driver,useraccount,password=data[1].split('=')[-1])   #登录\n            driver.find_element(by='css selector', value='#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1) > span > p').click()\n            time.sleep(1.5)\n            coupons_text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道7')\n            print(coupons_text)\n            assert coupons_text == result\n        elif casename == '不进行验证注册失败':\n            time.sleep(10)      #等待验证码发送至邮箱\n            code = Get_Code().wangyi(username=useraccount, password='Qwe3541118', name='hydraulic', no=1)  # 获取验证码\n            print(code[0])\n            self.input_code(driver, code)\n            WebDriverWait(driver, 30, 0.2).until(lambda x: x.find_element_by_xpath(\n                '//*[@id=\"app\"]/div/div[1]/div[2]/form/div[1]/div/div/span/span/input'))  # 显示等待\n            driver.find_element(by='xpath',\n                                value='//*[@id=\"app\"]/div/div[1]/div[2]/form/div[1]/div/div/span/span/input').send_keys(\n                data[1].split('=')[-1])  # 输入密码\n            time.sleep(1)\n            driver.find_element(by=\"xpath\",\n                                value='//*[@id=\"app\"]/div/div[1]/div[2]/form/div[3]/div/div/span/div/a').click()  # 点击下一步\n            time.sleep(1.5)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(text)\n            print('通道0')\n            print(text)\n            assert text == result\n        else:\n            try:\n                self.regist_mode1(useraccount, driver, data)\n                text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                           value=f\"{assert_way.split('=', 1)[1]}\").text\n                print('通道0')\n                print(text)\n                assert text == result\n            except :\n>               raise AssertionError\nE               AssertionError\n\n..\\mode\\register.py:155: AssertionError",
    "steps" : [ {
      "name" : "添加失败截图...",
      "time" : {
        "start" : 1650935395171,
        "stop" : 1650935395446,
        "duration" : 275
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "115fc332822af715",
        "name" : "失败截图",
        "source" : "115fc332822af715.png",
        "type" : "image/png",
        "size" : 46308
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 1
    } ],
    "attachments" : [ {
      "uid" : "759ca8c04c797b3b",
      "name" : "stdout",
      "source" : "759ca8c04c797b3b.txt",
      "type" : "text/plain",
      "size" : 19
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 1,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 2
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1650936455050,
      "stop" : 1650936455249,
      "duration" : 199
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "driver::0",
    "time" : {
      "start" : 1650936455251,
      "stop" : 1650936455251,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "注册"
  }, {
    "name" : "suite",
    "value" : "test_main"
  }, {
    "name" : "subSuite",
    "value" : "Test_Main"
  }, {
    "name" : "host",
    "value" : "DESKTOP-NB3FDE0"
  }, {
    "name" : "thread",
    "value" : "8436-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_main"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "Parameter",
    "value" : "{'case_no': '29', 'casename': '密码为数字+大写字母+特殊字符注册成功', 'mode': '注册', 'data': 'useraccount=a883774917@163.com\\npassword=123ASD！@#', 'assert_way': 'class name=text-tit-lg', 'result': 'Congratulations, registration is successful'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 14,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 15
      },
      "items" : [ {
        "uid" : "e4dbe046b4f62601",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/38/allure/#testresult/e4dbe046b4f62601",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650868829261,
          "stop" : 1650868872328,
          "duration" : 43067
        }
      }, {
        "uid" : "2238032f8799e5b9",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/37/allure/#testresult/2238032f8799e5b9",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650866400071,
          "stop" : 1650866434866,
          "duration" : 34795
        }
      }, {
        "uid" : "7b160316b8ecab5a",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/36/allure/#testresult/7b160316b8ecab5a",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650858041671,
          "stop" : 1650858088406,
          "duration" : 46735
        }
      }, {
        "uid" : "9c10b9de63d1621f",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/34/allure/#testresult/9c10b9de63d1621f",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650854382033,
          "stop" : 1650854426332,
          "duration" : 44299
        }
      }, {
        "uid" : "54db28b3243e541b",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/33/allure/#testresult/54db28b3243e541b",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650852311156,
          "stop" : 1650852354898,
          "duration" : 43742
        }
      }, {
        "uid" : "4c37e23da8b16dc6",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/32/allure/#testresult/4c37e23da8b16dc6",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650789281527,
          "stop" : 1650789328043,
          "duration" : 46516
        }
      }, {
        "uid" : "9d4deafcbcbe3409",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/31/allure/#testresult/9d4deafcbcbe3409",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650785624292,
          "stop" : 1650785667291,
          "duration" : 42999
        }
      }, {
        "uid" : "96a4b119264f07cc",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/30/allure/#testresult/96a4b119264f07cc",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650604365671,
          "stop" : 1650604399727,
          "duration" : 34056
        }
      }, {
        "uid" : "fec2002eeb6c3c51",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/29/allure/#testresult/fec2002eeb6c3c51",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650599330652,
          "stop" : 1650599373669,
          "duration" : 43017
        }
      }, {
        "uid" : "4bfe6ab7ca578bc1",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/28/allure/#testresult/4bfe6ab7ca578bc1",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650597942137,
          "stop" : 1650597985994,
          "duration" : 43857
        }
      }, {
        "uid" : "2088842eb73b4963",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/27/allure/#testresult/2088842eb73b4963",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[id=\"register_step_1_userAccount\"]\"}\n  (Session info: chrome=100.0.4896.127)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00E27413+2389011]\n\tOrdinal0 [0x00DB9F61+1941345]\n\tOrdinal0 [0x00CAC658+837208]\n\tOrdinal0 [0x00CD91DD+1020381]\n\tOrdinal0 [0x00CD949B+1021083]\n\tOrdinal0 [0x00D06032+1204274]\n\tOrdinal0 [0x00CF4194+1130900]\n\tOrdinal0 [0x00D04302+1196802]\n\tOrdinal0 [0x00CF3F66+1130342]\n\tOrdinal0 [0x00CCE546+976198]\n\tOrdinal0 [0x00CCF456+980054]\n\tGetHandleVerifier [0x00FD9632+1727522]\n\tGetHandleVerifier [0x0108BA4D+2457661]\n\tGetHandleVerifier [0x00EBEB81+569713]\n\tGetHandleVerifier [0x00EBDD76+566118]\n\tOrdinal0 [0x00DC0B2B+1968939]\n\tOrdinal0 [0x00DC5988+1989000]\n\tOrdinal0 [0x00DC5A75+1989237]\n\tOrdinal0 [0x00DCECB1+2026673]\n\tBaseThreadInitThunk [0x75906739+25]\n\tRtlGetFullPathName_UEx [0x77408E7F+1215]\n\tRtlGetFullPathName_UEx [0x77408E4D+1165]",
        "time" : {
          "start" : 1650596972218,
          "stop" : 1650596974805,
          "duration" : 2587
        }
      }, {
        "uid" : "ffda103b3bd78afa",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/24/allure/#testresult/ffda103b3bd78afa",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650520574141,
          "stop" : 1650520616939,
          "duration" : 42798
        }
      }, {
        "uid" : "46c679b975524f40",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/23/allure/#testresult/46c679b975524f40",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650519656669,
          "stop" : 1650519698794,
          "duration" : 42125
        }
      }, {
        "uid" : "1644574f6b2753d0",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/22/allure/#testresult/1644574f6b2753d0",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650518256659,
          "stop" : 1650518299788,
          "duration" : 43129
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "d42148f1ab2c3fe9.json",
  "parameterValues" : [ "{'case_no': '29', 'casename': '密码为数字+大写字母+特殊字符注册成功', 'mode': '注册', 'data': 'useraccount=a883774917@163.com\\npassword=123ASD！@#', 'assert_way': 'class name=text-tit-lg', 'result': 'Congratulations, registration is successful'}" ]
}