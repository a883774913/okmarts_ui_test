{
  "uid" : "e6aa8588d168e695",
  "name" : "使用other提交退货单成功",
  "fullName" : "test_main.Test_Main#test_my_order",
  "historyId" : "245cd4c5b0534b55bee499eae369ce3d",
  "time" : {
    "start" : 1652862501098,
    "stop" : 1652862534894,
    "duration" : 33796
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_main.Test_Main object at 0x0000013C3E1CF880>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"eeaae31250d5c4b4c8480299db4e3e21\")>\nParameter = {'assert_way': 'css selector=body > div.ant-message > span > div > div > div > span', 'case_no': '96', 'casename': '使用...reason=other\\ntext=123412412\\nimg=C:\\\\Users\\\\admin\\\\PycharmProjects\\\\pythonProject\\\\okmarts_ui_test\\\\data\\\\1.jpg', ...}\n\n    @allure.feature('订单管理')\n    @pytest.mark.parametrize('Parameter', case_infos['my_order'], ids=casename_infos['my_order'])\n    def test_my_order(self, driver, Parameter):\n        allure.dynamic.title(Parameter['casename'])\n>       My_Order().my_order(driver, Parameter)\n\ntest_main.py:125: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.my_order.My_Order object at 0x0000013C3DE8FF10>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"eeaae31250d5c4b4c8480299db4e3e21\")>\nParameter = {'assert_way': 'css selector=body > div.ant-message > span > div > div > div > span', 'case_no': '96', 'casename': '使用...reason=other\\ntext=123412412\\nimg=C:\\\\Users\\\\admin\\\\PycharmProjects\\\\pythonProject\\\\okmarts_ui_test\\\\data\\\\1.jpg', ...}\n\n    def my_order(self, driver, Parameter):\n        casename = Parameter['casename']\n        data = Parameter['data']\n        print(data)\n        assert_way = Parameter['assert_way']\n        result = Parameter['result']\n    \n        driver.get('http://18.118.13.94:81/index')  # 打开首页\n        time.sleep(1)\n        Common().is_login(driver, useraccount='979172251@qq.com', password='a123456')  # 检测是否登录\n        time.sleep(1)\n        driver.find_element(by='css selector', value='#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1)').click()  # 点击头像\n        time.sleep(2)\n        if casename == '点击个人中心Order record 订单成功显示':\n            print('通道1')\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").is_displayed()\n            print(text)\n            assert text == result\n        elif casename == '点击订单中的商品名称跳转商品详情成功':\n            print('通道2 ')\n            goods_name = driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[3]/div[1]/div/div[1]/div[2]/div/div[2]/div[1]/div[1]/div/a').text\n            print(goods_name)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[3]/div[1]/div/div[1]/div[2]/div/div[2]/div[1]/div[1]/div/a').click()  # 点击商品名称\n            time.sleep(2)\n            buy_now = driver.find_elements(by='class name', value='atn-btn-orange.ant-btn.ant-btn-block')[1].text  # 获取buy_now\n            # 文本 确认是在商品详情页面\n            print(buy_now)\n            assert buy_now == 'Buy now'\n    \n            goods_name1 = driver.find_element(by='class name', value='title.text-black.margin-bottom-sm').text  # 获取详情页面 商品名称\n            assert goods_name == goods_name1\n        elif casename == \"点击查看物流查看成功\":\n            print('通道3')\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[3]/div[1]/div/div[1]/div[2]/div/div[2]/div[1]/div[4]/a').click()  # 点击物流按钮\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(text)\n            assert text == result\n        elif casename == '未支付订单点击未支付跳转到支付页面':\n            print('通道4')\n            n = 0  # 判断是否找到\n            page = 0  # 判断所处页数\n            while True:\n                n = self.find_Unpaid(driver, n)\n                page += 1\n                print(f'n 为 {n} ')\n                if n == 0:  # 如果循环后没有找到 点击下一页进行查找\n                    print(f'第{page}未找到待支付订单数据')\n                    # 查询该页面是否为最后一页\n                    try:\n                        # 移动到翻页处\n                        Common().huadong(driver, by='class name', value='ant-pagination-item-link')\n                        # 先判断下一页按钮状态 如果为true 说明是最后一页\n                        info = driver.find_element(by='class name', value='ant-pagination-disabled.ant-pagination-next').get_attribute(\n                            'aria-disabled')\n                        if info == \"true\":\n                            print('此页为最后一页')\n                            break\n                    except NoSuchElementException:\n                        print('不是最后一页')\n                        driver.find_element(by='css selector', value='li[class=\" ant-pagination-next\"]').click()  # 点击下一页\n                        print('点击下一页')\n                        time.sleep(2)\n                else:  # 如果找到了-->\n                    print(f'第{page}页存在待支付数据')\n                    break\n            if n == 0:\n                print('该账户不存在待支付数据')\n                pass\n            else:\n                time.sleep(2)\n                # 获取待支付页面 断言文本\n                text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                           value=f\"{assert_way.split('=', 1)[1]}\").text\n                print(text)\n                assert text == result\n        elif casename == '点击order data可以根据订单时间进行排序':\n            Common().huadong(driver, by='class name', value='text-tit-lg.flex')  # 滑动到订单最上方\n            time.sleep(1)\n            element = driver.find_element(by='css selector',\n                                          value='#app > div > div.ui-container > div.content.my-center-form > div > div.record_out > div.table-out > div > div.title.flex.align-center > div:nth-child(2) > svg')\n            info = element.get_attribute('p-id')\n            self.assert_time_desc(driver, info)\n            time.sleep(2)\n            element.click()\n            info2 = element.get_attribute('p-id')\n            if info2 == info:\n                print('点击后未发生变化，再次点击')\n                element.click()  # 再次点击\n                time.sleep(2)\n                info3 = element.get_attribute('p-id')\n                self.assert_time_desc(driver, info3)\n            else:\n                self.assert_time_desc(driver, info2)\n        elif casename == '点击Total price可以根据订单金额进行排序':\n            Common().huadong(driver, by='class name', value='text-tit-lg.flex')  # 滑动到订单最上方\n            time.sleep(1)\n            element = driver.find_element(by='css selector', value='#app > div > div.ui-container > div.content.my-center-form > div > div.record_out > div.table-out '\n                                                                   '> div > div.title.flex.align-center > div:nth-child(3) > svg')\n            info = element.get_attribute('p-id')\n            self.assert_price_desc(driver, info)\n            time.sleep(1)\n            element.click()\n            info2 = element.get_attribute('p-id')\n            if info2 == info:\n                print('点击后未发生变化')\n                element.click()\n                time.sleep(1)\n                info3 = element.get_attribute('p-id')\n                self.assert_price_desc(driver, info3)\n            else:\n                self.assert_price_desc(driver, info2)\n        elif casename == '通过关键字及全文查找可以成功查询相同名称的订单':\n            Common().huadong(driver, by='class name', value='text-tit-lg.flex')  # 滑动到订单最上方\n            time.sleep(1)\n            try:\n                info = driver.find_element(by='css selector',\n                                           value='#app > div > div.ui-container > div.content.my-center-form > div > div.record_out > div.table-out > div > '\n                                                 'div.tableData > div:nth-child(1) > div.item.width-32.name > div > a').text\n                print(info)\n            except NoSuchElementException:\n                print('未找到订单数据')\n                raise AssertionError\n    \n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[3]/div[1]/div/div[1]/div[1]/div[2]/span/input').send_keys(info)  # 搜索栏输入名字\n            driver.find_element(by='class name', value='anticon.anticon-search.ant-input-search-icon').click()  # 点击搜索按钮\n            time.sleep(2)\n            elements = driver.find_elements(by='css selector', value='div[class=\"item width-32 name\"] > div > a')\n            erro = 0\n            for element in elements:\n                print(element.text)\n                if info in element.text:\n                    pass\n                else:\n                    erro += 1\n            if erro == 0:\n                assert True\n            else:\n                assert False\n        elif casename == '已签收订单点击退货申请进入退货页面成功':\n            n = self.go_return_goods(driver)\n            if n == 0:\n                print('该账户不存在已签收数据')\n                pass\n            else:\n                time.sleep(2)\n                # 获取待支付页面 断言文本\n                try:\n                    text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n                    print(text)\n                    assert text == result\n                except:\n                    raise AssertionError\n        elif '提交退货单' in casename:\n            self.get_Request_Return()\n            self.truncate_table()\n            n = self.go_return_goods(driver)\n            if n == 0:\n                print('该账户不存在已签收数据')\n                pytest.skip(msg=\"未找到相关数据\")\n            else:\n                time.sleep(2)\n                Reasons_for_return = data.split('\\n')[0].split('=')[-1]\n                print(Reasons_for_return)\n                reason = data.split('\\n')[1].split('=')[-1]\n                print(reason)\n                img = data.split('\\n')[2].split('=')[-1]\n                print(img)\n                if Reasons_for_return == 'Wrong order inform ation':\n                    driver.find_elements(by='class name', value='ant-select-selection__rendered')[1].click()\n                    time.sleep(1)\n                    driver.find_elements(by=\"class name\", value='ant-select-dropdown-menu-item')[1].click()  # 点击第2个\n                elif Reasons_for_return == 'Model error':\n                    driver.find_elements(by='class name', value='ant-select-selection__rendered')[1].click()\n                    time.sleep(1)\n                    driver.find_elements(by=\"class name\", value='ant-select-dropdown-menu-item')[2].click()  # 点击第3个\n                elif Reasons_for_return == 'other':\n                    driver.find_elements(by='class name', value='ant-select-selection__rendered')[1].click()\n                    time.sleep(1)\n                    driver.find_elements(by=\"class name\", value='ant-select-dropdown-menu-item')[3].click()  # 点击第4个\n                time.sleep(1)\n                driver.find_element(by='class name', value='tuik_text').send_keys(reason)  # 输入原因\n                if img == 'null':\n                    print('不上传图片')\n                    pass\n                else:\n                    if casename == '使用视频文件提交退货单失败':\n                        img_file = f'../data/test_8.mp4'\n                        img_path = os.path.abspath(img_file)\n                    else:\n                        img_file = f'../data/1.jpg'\n                        img_path = os.path.abspath(img_file)\n                    print(f'img_path为{img_path}')\n                    driver.find_element(by='class name', value='ant-upload').click()  # 点击上传\n                    time.sleep(2)\n                    pk = PyKeyboard()\n                    # 实例化\n                    pk.press_key(pk.shift_key)\n                    pk.release_key(pk.shift_key)\n                    pk.type_string(img_path)\n                    time.sleep(2)\n                    pk.press_key(pk.enter_key)  # 按压\n                    pk.release_key(pk.enter_key)  # 释放\n                    pk.press_key(pk.enter_key)  # 按压\n                    pk.release_key(pk.enter_key)  # 释放\n                    time.sleep(2)\n                driver.find_element(by='css selector', value='#app > div > div.ui-container > div.wai_box > div > div.tuik_div > div.tuik_right > button').click()  # 点击提交\n                time.sleep(2)\n                try:\n                    text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                                   value=f\"{assert_way.split('=', 1)[1]}\").text\n                    print(f'text为{text}')\n>                   assert text == result\nE                   AssertionError\n\n..\\mode\\my_order.py:236: AssertionError",
  "flaky" : true,
  "newFailed" : true,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1652859099152,
      "stop" : 1652859099326,
      "duration" : 174
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1652859099326,
      "stop" : 1652859100848,
      "duration" : 1522
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1652859100848,
      "stop" : 1652859100848,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_main.Test_Main object at 0x0000013C3E1CF880>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"eeaae31250d5c4b4c8480299db4e3e21\")>\nParameter = {'assert_way': 'css selector=body > div.ant-message > span > div > div > div > span', 'case_no': '96', 'casename': '使用...reason=other\\ntext=123412412\\nimg=C:\\\\Users\\\\admin\\\\PycharmProjects\\\\pythonProject\\\\okmarts_ui_test\\\\data\\\\1.jpg', ...}\n\n    @allure.feature('订单管理')\n    @pytest.mark.parametrize('Parameter', case_infos['my_order'], ids=casename_infos['my_order'])\n    def test_my_order(self, driver, Parameter):\n        allure.dynamic.title(Parameter['casename'])\n>       My_Order().my_order(driver, Parameter)\n\ntest_main.py:125: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.my_order.My_Order object at 0x0000013C3DE8FF10>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"eeaae31250d5c4b4c8480299db4e3e21\")>\nParameter = {'assert_way': 'css selector=body > div.ant-message > span > div > div > div > span', 'case_no': '96', 'casename': '使用...reason=other\\ntext=123412412\\nimg=C:\\\\Users\\\\admin\\\\PycharmProjects\\\\pythonProject\\\\okmarts_ui_test\\\\data\\\\1.jpg', ...}\n\n    def my_order(self, driver, Parameter):\n        casename = Parameter['casename']\n        data = Parameter['data']\n        print(data)\n        assert_way = Parameter['assert_way']\n        result = Parameter['result']\n    \n        driver.get('http://18.118.13.94:81/index')  # 打开首页\n        time.sleep(1)\n        Common().is_login(driver, useraccount='979172251@qq.com', password='a123456')  # 检测是否登录\n        time.sleep(1)\n        driver.find_element(by='css selector', value='#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1)').click()  # 点击头像\n        time.sleep(2)\n        if casename == '点击个人中心Order record 订单成功显示':\n            print('通道1')\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").is_displayed()\n            print(text)\n            assert text == result\n        elif casename == '点击订单中的商品名称跳转商品详情成功':\n            print('通道2 ')\n            goods_name = driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[3]/div[1]/div/div[1]/div[2]/div/div[2]/div[1]/div[1]/div/a').text\n            print(goods_name)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[3]/div[1]/div/div[1]/div[2]/div/div[2]/div[1]/div[1]/div/a').click()  # 点击商品名称\n            time.sleep(2)\n            buy_now = driver.find_elements(by='class name', value='atn-btn-orange.ant-btn.ant-btn-block')[1].text  # 获取buy_now\n            # 文本 确认是在商品详情页面\n            print(buy_now)\n            assert buy_now == 'Buy now'\n    \n            goods_name1 = driver.find_element(by='class name', value='title.text-black.margin-bottom-sm').text  # 获取详情页面 商品名称\n            assert goods_name == goods_name1\n        elif casename == \"点击查看物流查看成功\":\n            print('通道3')\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[3]/div[1]/div/div[1]/div[2]/div/div[2]/div[1]/div[4]/a').click()  # 点击物流按钮\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(text)\n            assert text == result\n        elif casename == '未支付订单点击未支付跳转到支付页面':\n            print('通道4')\n            n = 0  # 判断是否找到\n            page = 0  # 判断所处页数\n            while True:\n                n = self.find_Unpaid(driver, n)\n                page += 1\n                print(f'n 为 {n} ')\n                if n == 0:  # 如果循环后没有找到 点击下一页进行查找\n                    print(f'第{page}未找到待支付订单数据')\n                    # 查询该页面是否为最后一页\n                    try:\n                        # 移动到翻页处\n                        Common().huadong(driver, by='class name', value='ant-pagination-item-link')\n                        # 先判断下一页按钮状态 如果为true 说明是最后一页\n                        info = driver.find_element(by='class name', value='ant-pagination-disabled.ant-pagination-next').get_attribute(\n                            'aria-disabled')\n                        if info == \"true\":\n                            print('此页为最后一页')\n                            break\n                    except NoSuchElementException:\n                        print('不是最后一页')\n                        driver.find_element(by='css selector', value='li[class=\" ant-pagination-next\"]').click()  # 点击下一页\n                        print('点击下一页')\n                        time.sleep(2)\n                else:  # 如果找到了-->\n                    print(f'第{page}页存在待支付数据')\n                    break\n            if n == 0:\n                print('该账户不存在待支付数据')\n                pass\n            else:\n                time.sleep(2)\n                # 获取待支付页面 断言文本\n                text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                           value=f\"{assert_way.split('=', 1)[1]}\").text\n                print(text)\n                assert text == result\n        elif casename == '点击order data可以根据订单时间进行排序':\n            Common().huadong(driver, by='class name', value='text-tit-lg.flex')  # 滑动到订单最上方\n            time.sleep(1)\n            element = driver.find_element(by='css selector',\n                                          value='#app > div > div.ui-container > div.content.my-center-form > div > div.record_out > div.table-out > div > div.title.flex.align-center > div:nth-child(2) > svg')\n            info = element.get_attribute('p-id')\n            self.assert_time_desc(driver, info)\n            time.sleep(2)\n            element.click()\n            info2 = element.get_attribute('p-id')\n            if info2 == info:\n                print('点击后未发生变化，再次点击')\n                element.click()  # 再次点击\n                time.sleep(2)\n                info3 = element.get_attribute('p-id')\n                self.assert_time_desc(driver, info3)\n            else:\n                self.assert_time_desc(driver, info2)\n        elif casename == '点击Total price可以根据订单金额进行排序':\n            Common().huadong(driver, by='class name', value='text-tit-lg.flex')  # 滑动到订单最上方\n            time.sleep(1)\n            element = driver.find_element(by='css selector', value='#app > div > div.ui-container > div.content.my-center-form > div > div.record_out > div.table-out '\n                                                                   '> div > div.title.flex.align-center > div:nth-child(3) > svg')\n            info = element.get_attribute('p-id')\n            self.assert_price_desc(driver, info)\n            time.sleep(1)\n            element.click()\n            info2 = element.get_attribute('p-id')\n            if info2 == info:\n                print('点击后未发生变化')\n                element.click()\n                time.sleep(1)\n                info3 = element.get_attribute('p-id')\n                self.assert_price_desc(driver, info3)\n            else:\n                self.assert_price_desc(driver, info2)\n        elif casename == '通过关键字及全文查找可以成功查询相同名称的订单':\n            Common().huadong(driver, by='class name', value='text-tit-lg.flex')  # 滑动到订单最上方\n            time.sleep(1)\n            try:\n                info = driver.find_element(by='css selector',\n                                           value='#app > div > div.ui-container > div.content.my-center-form > div > div.record_out > div.table-out > div > '\n                                                 'div.tableData > div:nth-child(1) > div.item.width-32.name > div > a').text\n                print(info)\n            except NoSuchElementException:\n                print('未找到订单数据')\n                raise AssertionError\n    \n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[3]/div[1]/div/div[1]/div[1]/div[2]/span/input').send_keys(info)  # 搜索栏输入名字\n            driver.find_element(by='class name', value='anticon.anticon-search.ant-input-search-icon').click()  # 点击搜索按钮\n            time.sleep(2)\n            elements = driver.find_elements(by='css selector', value='div[class=\"item width-32 name\"] > div > a')\n            erro = 0\n            for element in elements:\n                print(element.text)\n                if info in element.text:\n                    pass\n                else:\n                    erro += 1\n            if erro == 0:\n                assert True\n            else:\n                assert False\n        elif casename == '已签收订单点击退货申请进入退货页面成功':\n            n = self.go_return_goods(driver)\n            if n == 0:\n                print('该账户不存在已签收数据')\n                pass\n            else:\n                time.sleep(2)\n                # 获取待支付页面 断言文本\n                try:\n                    text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n                    print(text)\n                    assert text == result\n                except:\n                    raise AssertionError\n        elif '提交退货单' in casename:\n            self.get_Request_Return()\n            self.truncate_table()\n            n = self.go_return_goods(driver)\n            if n == 0:\n                print('该账户不存在已签收数据')\n                pytest.skip(msg=\"未找到相关数据\")\n            else:\n                time.sleep(2)\n                Reasons_for_return = data.split('\\n')[0].split('=')[-1]\n                print(Reasons_for_return)\n                reason = data.split('\\n')[1].split('=')[-1]\n                print(reason)\n                img = data.split('\\n')[2].split('=')[-1]\n                print(img)\n                if Reasons_for_return == 'Wrong order inform ation':\n                    driver.find_elements(by='class name', value='ant-select-selection__rendered')[1].click()\n                    time.sleep(1)\n                    driver.find_elements(by=\"class name\", value='ant-select-dropdown-menu-item')[1].click()  # 点击第2个\n                elif Reasons_for_return == 'Model error':\n                    driver.find_elements(by='class name', value='ant-select-selection__rendered')[1].click()\n                    time.sleep(1)\n                    driver.find_elements(by=\"class name\", value='ant-select-dropdown-menu-item')[2].click()  # 点击第3个\n                elif Reasons_for_return == 'other':\n                    driver.find_elements(by='class name', value='ant-select-selection__rendered')[1].click()\n                    time.sleep(1)\n                    driver.find_elements(by=\"class name\", value='ant-select-dropdown-menu-item')[3].click()  # 点击第4个\n                time.sleep(1)\n                driver.find_element(by='class name', value='tuik_text').send_keys(reason)  # 输入原因\n                if img == 'null':\n                    print('不上传图片')\n                    pass\n                else:\n                    if casename == '使用视频文件提交退货单失败':\n                        img_file = f'../data/test_8.mp4'\n                        img_path = os.path.abspath(img_file)\n                    else:\n                        img_file = f'../data/1.jpg'\n                        img_path = os.path.abspath(img_file)\n                    print(f'img_path为{img_path}')\n                    driver.find_element(by='class name', value='ant-upload').click()  # 点击上传\n                    time.sleep(2)\n                    pk = PyKeyboard()\n                    # 实例化\n                    pk.press_key(pk.shift_key)\n                    pk.release_key(pk.shift_key)\n                    pk.type_string(img_path)\n                    time.sleep(2)\n                    pk.press_key(pk.enter_key)  # 按压\n                    pk.release_key(pk.enter_key)  # 释放\n                    pk.press_key(pk.enter_key)  # 按压\n                    pk.release_key(pk.enter_key)  # 释放\n                    time.sleep(2)\n                driver.find_element(by='css selector', value='#app > div > div.ui-container > div.wai_box > div > div.tuik_div > div.tuik_right > button').click()  # 点击提交\n                time.sleep(2)\n                try:\n                    text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                                   value=f\"{assert_way.split('=', 1)[1]}\").text\n                    print(f'text为{text}')\n>                   assert text == result\nE                   AssertionError\n\n..\\mode\\my_order.py:236: AssertionError",
    "steps" : [ {
      "name" : "添加失败截图...",
      "time" : {
        "start" : 1652862534915,
        "stop" : 1652862535057,
        "duration" : 142
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "f0db96376d246d5a",
        "name" : "失败截图",
        "source" : "f0db96376d246d5a.png",
        "type" : "image/png",
        "size" : 74230
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ {
      "uid" : "ab31825f3b6e8e9e",
      "name" : "stdout",
      "source" : "ab31825f3b6e8e9e.txt",
      "type" : "text/plain",
      "size" : 1551
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 1,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1652862568814,
      "stop" : 1652862569249,
      "duration" : 435
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "driver::0",
    "time" : {
      "start" : 1652862569253,
      "stop" : 1652862569253,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "订单管理"
  }, {
    "name" : "suite",
    "value" : "test_main"
  }, {
    "name" : "subSuite",
    "value" : "Test_Main"
  }, {
    "name" : "host",
    "value" : "DESKTOP-NB3FDE0"
  }, {
    "name" : "thread",
    "value" : "23480-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_main"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "Parameter",
    "value" : "{'case_no': '96', 'casename': '使用other提交退货单成功', 'mode': '订单管理', 'data': 'reason=other\\ntext=123412412\\nimg=C:\\\\Users\\\\admin\\\\PycharmProjects\\\\pythonProject\\\\okmarts_ui_test\\\\data\\\\1.jpg', 'assert_way': 'css selector=body > div.ant-message > span > div > div > div > span', 'result': 'add success'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 3,
        "broken" : 7,
        "skipped" : 2,
        "passed" : 1,
        "unknown" : 0,
        "total" : 13
      },
      "items" : [ {
        "uid" : "229257b55cc1a349",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/63/allure/#testresult/229257b55cc1a349",
        "status" : "passed",
        "time" : {
          "start" : 1652839471698,
          "stop" : 1652839503460,
          "duration" : 31762
        }
      }, {
        "uid" : "264d77edae373641",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/62/allure/#testresult/264d77edae373641",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1652762626831,
          "stop" : 1652762650329,
          "duration" : 23498
        }
      }, {
        "uid" : "f5077bef7b6f4bca",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/59/allure/#testresult/f5077bef7b6f4bca",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"/html/body/div[2]/span/div/div/div/span\"}\n  (Session info: chrome=101.0.4951.54)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00557413+2389011]\n\tOrdinal0 [0x004E9F61+1941345]\n\tOrdinal0 [0x003DC658+837208]\n\tOrdinal0 [0x004091DD+1020381]\n\tOrdinal0 [0x0040949B+1021083]\n\tOrdinal0 [0x00436032+1204274]\n\tOrdinal0 [0x00424194+1130900]\n\tOrdinal0 [0x00434302+1196802]\n\tOrdinal0 [0x00423F66+1130342]\n\tOrdinal0 [0x003FE546+976198]\n\tOrdinal0 [0x003FF456+980054]\n\tGetHandleVerifier [0x00709632+1727522]\n\tGetHandleVerifier [0x007BBA4D+2457661]\n\tGetHandleVerifier [0x005EEB81+569713]\n\tGetHandleVerifier [0x005EDD76+566118]\n\tOrdinal0 [0x004F0B2B+1968939]\n\tOrdinal0 [0x004F5988+1989000]\n\tOrdinal0 [0x004F5A75+1989237]\n\tOrdinal0 [0x004FECB1+2026673]\n\tBaseThreadInitThunk [0x76D76739+25]\n\tRtlGetFullPathName_UEx [0x77D88E7F+1215]\n\tRtlGetFullPathName_UEx [0x77D88E4D+1165]",
        "time" : {
          "start" : 1652157967017,
          "stop" : 1652157988362,
          "duration" : 21345
        }
      }, {
        "uid" : "9a94e7ecdaee73d9",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/58/allure/#testresult/9a94e7ecdaee73d9",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1651893652493,
          "stop" : 1651893673863,
          "duration" : 21370
        }
      }, {
        "uid" : "3e2756352217ce82",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/56/allure/#testresult/3e2756352217ce82",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\nBacktrace:\n\tOrdinal0 [0x006D7413+2389011]\n\tOrdinal0 [0x00669F61+1941345]\n\tOrdinal0 [0x0055C658+837208]\n\tOrdinal0 [0x005891DD+1020381]\n\tOrdinal0 [0x0058949B+1021083]\n\tOrdinal0 [0x005B6032+1204274]\n\tOrdinal0 [0x005A4194+1130900]\n\tOrdinal0 [0x005B4302+1196802]\n\tOrdinal0 [0x005A3F66+1130342]\n\tOrdinal0 [0x0057E546+976198]\n\tOrdinal0 [0x0057F456+980054]\n\tGetHandleVerifier [0x00889632+1727522]\n\tGetHandleVerifier [0x0093BA4D+2457661]\n\tGetHandleVerifier [0x0076EB81+569713]\n\tGetHandleVerifier [0x0076DD76+566118]\n\tOrdinal0 [0x00670B2B+1968939]\n\tOrdinal0 [0x00675988+1989000]\n\tOrdinal0 [0x00675A75+1989237]\n\tOrdinal0 [0x0067ECB1+2026673]\n\tBaseThreadInitThunk [0x75906739+25]\n\tRtlGetFullPathName_UEx [0x77408E7F+1215]\n\tRtlGetFullPathName_UEx [0x77408E4D+1165]",
        "time" : {
          "start" : 1651826050858,
          "stop" : 1651826090591,
          "duration" : 39733
        }
      }, {
        "uid" : "aadc111416b433d5",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/55/allure/#testresult/aadc111416b433d5",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\nBacktrace:\n\tOrdinal0 [0x006D7413+2389011]\n\tOrdinal0 [0x00669F61+1941345]\n\tOrdinal0 [0x0055C658+837208]\n\tOrdinal0 [0x005891DD+1020381]\n\tOrdinal0 [0x0058949B+1021083]\n\tOrdinal0 [0x005B6032+1204274]\n\tOrdinal0 [0x005A4194+1130900]\n\tOrdinal0 [0x005B4302+1196802]\n\tOrdinal0 [0x005A3F66+1130342]\n\tOrdinal0 [0x0057E546+976198]\n\tOrdinal0 [0x0057F456+980054]\n\tGetHandleVerifier [0x00889632+1727522]\n\tGetHandleVerifier [0x0093BA4D+2457661]\n\tGetHandleVerifier [0x0076EB81+569713]\n\tGetHandleVerifier [0x0076DD76+566118]\n\tOrdinal0 [0x00670B2B+1968939]\n\tOrdinal0 [0x00675988+1989000]\n\tOrdinal0 [0x00675A75+1989237]\n\tOrdinal0 [0x0067ECB1+2026673]\n\tBaseThreadInitThunk [0x75906739+25]\n\tRtlGetFullPathName_UEx [0x77408E7F+1215]\n\tRtlGetFullPathName_UEx [0x77408E4D+1165]",
        "time" : {
          "start" : 1651822753582,
          "stop" : 1651822793272,
          "duration" : 39690
        }
      }, {
        "uid" : "cab9cbc5a76aa300",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/54/allure/#testresult/cab9cbc5a76aa300",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\nBacktrace:\n\tOrdinal0 [0x006D7413+2389011]\n\tOrdinal0 [0x00669F61+1941345]\n\tOrdinal0 [0x0055C658+837208]\n\tOrdinal0 [0x005891DD+1020381]\n\tOrdinal0 [0x0058949B+1021083]\n\tOrdinal0 [0x005B6032+1204274]\n\tOrdinal0 [0x005A4194+1130900]\n\tOrdinal0 [0x005B4302+1196802]\n\tOrdinal0 [0x005A3F66+1130342]\n\tOrdinal0 [0x0057E546+976198]\n\tOrdinal0 [0x0057F456+980054]\n\tGetHandleVerifier [0x00889632+1727522]\n\tGetHandleVerifier [0x0093BA4D+2457661]\n\tGetHandleVerifier [0x0076EB81+569713]\n\tGetHandleVerifier [0x0076DD76+566118]\n\tOrdinal0 [0x00670B2B+1968939]\n\tOrdinal0 [0x00675988+1989000]\n\tOrdinal0 [0x00675A75+1989237]\n\tOrdinal0 [0x0067ECB1+2026673]\n\tBaseThreadInitThunk [0x75906739+25]\n\tRtlGetFullPathName_UEx [0x77408E7F+1215]\n\tRtlGetFullPathName_UEx [0x77408E4D+1165]",
        "time" : {
          "start" : 1651818667626,
          "stop" : 1651818714261,
          "duration" : 46635
        }
      }, {
        "uid" : "c35c9b5d2f2f48d9",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/52/allure/#testresult/c35c9b5d2f2f48d9",
        "status" : "skipped",
        "statusDetails" : "Skipped: 未找到相关数据",
        "time" : {
          "start" : 1651811602415,
          "stop" : 1651811688146,
          "duration" : 85731
        }
      }, {
        "uid" : "845f30f375cf71d5",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/51/allure/#testresult/845f30f375cf71d5",
        "status" : "skipped",
        "statusDetails" : "Skipped: 未找到相关数据",
        "time" : {
          "start" : 1651739364932,
          "stop" : 1651739451227,
          "duration" : 86295
        }
      }, {
        "uid" : "a663cc9ac06013c",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/50/allure/#testresult/a663cc9ac06013c",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\nBacktrace:\n\tMicrosoft::Applications::Events::EventProperties::unpack [0x00007FF6CD461922+25346]\n\tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF6CD39E982+515794]\n\tOrdinal0 [0x00007FF6CCEB0BC5+658373]\n\tOrdinal0 [0x00007FF6CCEEB992+899474]\n\tOrdinal0 [0x00007FF6CCEEBC68+900200]\n\tOrdinal0 [0x00007FF6CCF1D937+1104183]\n\tOrdinal0 [0x00007FF6CCF06C7F+1010815]\n\tOrdinal0 [0x00007FF6CCF1B034+1093684]\n\tOrdinal0 [0x00007FF6CCF06A53+1010259]\n\tOrdinal0 [0x00007FF6CCEDDB47+842567]\n\tOrdinal0 [0x00007FF6CCEDF018+847896]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6CD06F1C8+827304]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF6CD159389+34681]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF6CD15C562+47442]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6CCFAC6D6+29878]\n\tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF6CD3A5971+544449]\n\tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF6CD3AA974+564932]\n\tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF6CD3AAACD+565277]\n\tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF6CD3B48BE+605710]\n\tBaseThreadInitThunk [0x00007FFB3F2854E0+16]\n\tRtlUserThreadStart [0x00007FFB4090485B+43]",
        "time" : {
          "start" : 1651221629548,
          "stop" : 1651221762109,
          "duration" : 132561
        }
      }, {
        "uid" : "2acfaf715243b540",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/49/allure/#testresult/2acfaf715243b540",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\nBacktrace:\n\tMicrosoft::Applications::Events::EventProperties::unpack [0x00007FF6CD461922+25346]\n\tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF6CD39E982+515794]\n\tOrdinal0 [0x00007FF6CCEB0BC5+658373]\n\tOrdinal0 [0x00007FF6CCEEB992+899474]\n\tOrdinal0 [0x00007FF6CCEEBC68+900200]\n\tOrdinal0 [0x00007FF6CCF1D937+1104183]\n\tOrdinal0 [0x00007FF6CCF06C7F+1010815]\n\tOrdinal0 [0x00007FF6CCF1B034+1093684]\n\tOrdinal0 [0x00007FF6CCF06A53+1010259]\n\tOrdinal0 [0x00007FF6CCEDDB47+842567]\n\tOrdinal0 [0x00007FF6CCEDF018+847896]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6CD06F1C8+827304]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF6CD159389+34681]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF6CD15C562+47442]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6CCFAC6D6+29878]\n\tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF6CD3A5971+544449]\n\tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF6CD3AA974+564932]\n\tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF6CD3AAACD+565277]\n\tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF6CD3B48BE+605710]\n\tBaseThreadInitThunk [0x00007FFB3F2854E0+16]\n\tRtlUserThreadStart [0x00007FFB4090485B+43]",
        "time" : {
          "start" : 1651202488708,
          "stop" : 1651202607789,
          "duration" : 119081
        }
      }, {
        "uid" : "3a286739b15adabd",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/48/allure/#testresult/3a286739b15adabd",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"/html/body/div[2]/span/div/div/div/span\"}\n  (Session info: MicrosoftEdge=100.0.1185.50)\nStacktrace:\nBacktrace:\n\tMicrosoft::Applications::Events::EventProperties::unpack [0x00007FF6CD461922+25346]\n\tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF6CD39E982+515794]\n\tOrdinal0 [0x00007FF6CCEB0BC5+658373]\n\tOrdinal0 [0x00007FF6CCEEB992+899474]\n\tOrdinal0 [0x00007FF6CCEEBC68+900200]\n\tOrdinal0 [0x00007FF6CCF1D937+1104183]\n\tOrdinal0 [0x00007FF6CCF06C7F+1010815]\n\tOrdinal0 [0x00007FF6CCF1B034+1093684]\n\tOrdinal0 [0x00007FF6CCF06A53+1010259]\n\tOrdinal0 [0x00007FF6CCEDDB47+842567]\n\tOrdinal0 [0x00007FF6CCEDF018+847896]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6CD06F1C8+827304]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF6CD159389+34681]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF6CD15C562+47442]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6CCFAC6D6+29878]\n\tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF6CD3A5971+544449]\n\tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF6CD3AA974+564932]\n\tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF6CD3AAACD+565277]\n\tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF6CD3B48BE+605710]\n\tBaseThreadInitThunk [0x00007FFB3F2854E0+16]\n\tRtlUserThreadStart [0x00007FFB4090485B+43]",
        "time" : {
          "start" : 1651196473280,
          "stop" : 1651196569481,
          "duration" : 96201
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "e6aa8588d168e695.json",
  "parameterValues" : [ "{'case_no': '96', 'casename': '使用other提交退货单成功', 'mode': '订单管理', 'data': 'reason=other\\ntext=123412412\\nimg=C:\\\\Users\\\\admin\\\\PycharmProjects\\\\pythonProject\\\\okmarts_ui_test\\\\data\\\\1.jpg', 'assert_way': 'css selector=body > div.ant-message > span > div > div > div > span', 'result': 'add success'}" ]
}