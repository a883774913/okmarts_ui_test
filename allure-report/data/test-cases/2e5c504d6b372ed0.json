{
  "uid" : "2e5c504d6b372ed0",
  "name" : "购物车数量大于99时，购物车略缩图显示99+",
  "fullName" : "test_main.Test_Main#test_shop_car",
  "historyId" : "3f54a47c502af8d286207dc9297b5503",
  "time" : {
    "start" : 1651739642053,
    "stop" : 1651739655394,
    "duration" : 13341
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_main.Test_Main object at 0x0000019A43124BE0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"393be1dc5d8969509f153a9f15ae2e9e\")>\nParameter = {'assert_way': 'class name=num', 'case_no': '', 'casename': '购物车数量大于99时，购物车略缩图显示99+', 'data': '', ...}\n\n    @allure.feature('购物车')\n    @pytest.mark.parametrize('Parameter', case_infos['shop_car'], ids=casename_infos['shop_car'])\n    def test_shop_car(self,driver,Parameter):\n        allure.dynamic.title(Parameter['casename'])\n>       Shop_Car().shop_car(driver,Parameter)\n\ntest_main.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.shop_car.Shop_Car object at 0x0000019A43124D90>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"393be1dc5d8969509f153a9f15ae2e9e\")>\nParameter = {'assert_way': 'class name=num', 'case_no': '', 'casename': '购物车数量大于99时，购物车略缩图显示99+', 'data': '', ...}\n\n    def shop_car(self, driver, Parameter):\n        casename = Parameter['casename']\n        data = Parameter['data']\n        print(data)\n        assert_way = Parameter['assert_way']\n        result = Parameter['result']\n    \n        driver.get('http://18.118.13.94:81/index')  # 打开首页\n        WebDriverWait(driver, 20, 0.2).until(lambda x: x.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div/div[2]/div[3]/div[3]/span[1]'))\n        time.sleep(1)\n        if casename == '未登录状态下点击购物车页面跳转到登录页面成功':\n            Common().Restore_environment(driver)\n            time.sleep(1)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div/div[2]/div[3]/div[3]/span[1]').click()\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(text)\n            assert text == result\n        else:\n            Common().is_login(driver, useraccount='979172251@qq.com', password='a123456')\n            time.sleep(2)\n            if casename == '首页显示购物车图标，点击购物车，页面跳转到购物车页面':\n                info = driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div/div[2]/div[3]/div[3]/span[1]').text  # 检查是否存在购物车按钮\n                print(info)\n                goods_number = driver.find_element(by='class name', value='num').text       #获取购物车小图标显示数量\n                print(goods_number)\n                assert info == 'Cart'\n                driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div/div[2]/div[3]/div[3]/span[1]').click()     #点击购物车\n                time.sleep(2)\n                if goods_number == '0':\n                    text = driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div/div[2]/div[1]/a').text\n                    print('不存在商品')\n                    print(text)\n                    assert text == 'The shopping cart is still empty for the time being, go pick a few items right away'\n                else:\n                    print('存在商品')\n                    text = driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div/div[2]/div[1]/div[1]/div[1]/div[1]/span').text\n                    assert text == 'Shopping cart'\n            elif casename == '购物车内无商品时点击相关文字跳转到首页成功':\n                goods_number = driver.find_element(by='class name', value='num').text  # 判断购物车是否有商品\n                if goods_number != '0':  # 如果商品数量不为0，删除该账户购物车商品数据\n                    print('存在商品，删除中')\n                    Mysql().drop_table(user=\"root\", pwd=\"OKmarts888.,\", host=\"18.118.13.94\", db=\"okmarts\", port=3306,\n                                       sql=\"DELETE FROM shopping_cart WHERE userid='1506910015154425856';\")\n                    time.sleep(1)\n                else:\n                    pass\n                driver.find_element(by='class name', value='num').click()\n                time.sleep(2)\n                text = driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div/div[2]/div[1]/a').text\n                print(text)\n                assert text == 'The shopping cart is still empty for the time being, go pick a few items right away'\n                driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div/div[2]/div[1]/a').click()\n                time.sleep(2)\n                text1 = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                            value=f\"{assert_way.split('=', 1)[1]}\").text\n                assert text1 == result\n            elif casename == '当商品添加数量为1时无法点击-号':\n                Mysql().drop_table(user=\"root\", pwd=\"OKmarts888.,\", host=\"18.118.13.94\", db=\"okmarts\", port=3306,\n                                   sql=\"DELETE FROM shopping_cart WHERE userid='1506910015154425856';\")\n                time.sleep(1)\n                self.add_goods_to_shopcar(driver)  # 加入商品至购物车\n                try:\n                    info = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").get_attribute(\"disabled\")\n                    print(info)\n                    assert info == result\n                except:\n                    assert False\n            elif casename == '购物车内包含商品时，购物车图标显示正确':\n                goods_number = driver.find_element(by='class name', value='num').text  # 判断购物车是否有商品\n                print(goods_number)\n                if goods_number == '0':  # 如果商品数量为0\n                    self.add_goods_to_shopcar(driver)\n                    goods_number2 = driver.find_element(by='class name', value='num').text  # 判断购物车商品数量有无增加\n                    print(goods_number2)\n                    assert int(goods_number2) == int(goods_number) + 1\n                elif goods_number == '99+':\n                    driver.find_element(by='class name', value='num').click()  # 点击购物车\n                    time.sleep(2)\n                    driver.find_element(by='css selector', value='label[class=\"ant-checkbox-wrapper\"]').click()  # 点击勾选全部\n                    time.sleep(0.5)\n                    driver.find_element(by='css selector', value='#app > div > div > div.ui-container > div.content.flex.space-between > div.auction-info > '\n                                                                 'div.title-1.flex.align-center.space-between > div.action.text-blue > a').click()  # 点击删除\n                    time.sleep(0.5)\n                    driver.find_element(by='class name', value='ant-btn.ant-btn-primary.ant-btn-sm').click()  # 点击确认\n                    time.sleep(3)\n                    goods_number2 = driver.find_element(by='class name', value='num').text  # 判断购物车商品数量有无增加\n                    print(goods_number2)\n                    assert goods_number2 == '0'\n                else:  # 否则则为0-99+ 中的值\n                    driver.find_element(by='class name', value='num').click()  # 点击购物车\n                    time.sleep(2)\n                    driver.find_element(by='css selector', value='svg[p-id=\"3096\"]').click()  # 点击加\n                    time.sleep(3)\n                    goods_number2 = driver.find_element(by='class name', value='num').text  # 判断购物车商品数量有无增加\n                    print(goods_number2)\n                    assert int(goods_number2) == int(goods_number) + 1\n                    driver.find_element(by='css selector', value='svg[p-id=\"2909\"]').click()  # 点击减\n                    time.sleep(3)\n                    goods_number3 = driver.find_element(by='class name', value='num').text  # 判断购物车商品数量有无减少\n                    assert goods_number3 == goods_number\n            elif casename == '购物车数量大于99时，购物车略缩图显示99+':\n                self.add_goods_to_shopcar(driver)\n                driver.find_element(by='class name', value='input.ant-input').send_keys(Keys.CONTROL, 'a')\n                time.sleep(0.5)\n                driver.find_element(by='class name', value='input.ant-input').send_keys('100')\n                time.sleep(3)\n                goods_number = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                                   value=f\"{assert_way.split('=', 1)[1]}\").text\n                print(goods_number)\n>               assert goods_number == result\nE               AssertionError\n\n..\\mode\\shop_car.py:127: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "driver",
    "time" : {
      "start" : 1651737471434,
      "stop" : 1651737473198,
      "duration" : 1764
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1651737473198,
      "stop" : 1651737473199,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_main.Test_Main object at 0x0000019A43124BE0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"393be1dc5d8969509f153a9f15ae2e9e\")>\nParameter = {'assert_way': 'class name=num', 'case_no': '', 'casename': '购物车数量大于99时，购物车略缩图显示99+', 'data': '', ...}\n\n    @allure.feature('购物车')\n    @pytest.mark.parametrize('Parameter', case_infos['shop_car'], ids=casename_infos['shop_car'])\n    def test_shop_car(self,driver,Parameter):\n        allure.dynamic.title(Parameter['casename'])\n>       Shop_Car().shop_car(driver,Parameter)\n\ntest_main.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.shop_car.Shop_Car object at 0x0000019A43124D90>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"393be1dc5d8969509f153a9f15ae2e9e\")>\nParameter = {'assert_way': 'class name=num', 'case_no': '', 'casename': '购物车数量大于99时，购物车略缩图显示99+', 'data': '', ...}\n\n    def shop_car(self, driver, Parameter):\n        casename = Parameter['casename']\n        data = Parameter['data']\n        print(data)\n        assert_way = Parameter['assert_way']\n        result = Parameter['result']\n    \n        driver.get('http://18.118.13.94:81/index')  # 打开首页\n        WebDriverWait(driver, 20, 0.2).until(lambda x: x.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div/div[2]/div[3]/div[3]/span[1]'))\n        time.sleep(1)\n        if casename == '未登录状态下点击购物车页面跳转到登录页面成功':\n            Common().Restore_environment(driver)\n            time.sleep(1)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div/div[2]/div[3]/div[3]/span[1]').click()\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(text)\n            assert text == result\n        else:\n            Common().is_login(driver, useraccount='979172251@qq.com', password='a123456')\n            time.sleep(2)\n            if casename == '首页显示购物车图标，点击购物车，页面跳转到购物车页面':\n                info = driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div/div[2]/div[3]/div[3]/span[1]').text  # 检查是否存在购物车按钮\n                print(info)\n                goods_number = driver.find_element(by='class name', value='num').text       #获取购物车小图标显示数量\n                print(goods_number)\n                assert info == 'Cart'\n                driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div/div[2]/div[3]/div[3]/span[1]').click()     #点击购物车\n                time.sleep(2)\n                if goods_number == '0':\n                    text = driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div/div[2]/div[1]/a').text\n                    print('不存在商品')\n                    print(text)\n                    assert text == 'The shopping cart is still empty for the time being, go pick a few items right away'\n                else:\n                    print('存在商品')\n                    text = driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div/div[2]/div[1]/div[1]/div[1]/div[1]/span').text\n                    assert text == 'Shopping cart'\n            elif casename == '购物车内无商品时点击相关文字跳转到首页成功':\n                goods_number = driver.find_element(by='class name', value='num').text  # 判断购物车是否有商品\n                if goods_number != '0':  # 如果商品数量不为0，删除该账户购物车商品数据\n                    print('存在商品，删除中')\n                    Mysql().drop_table(user=\"root\", pwd=\"OKmarts888.,\", host=\"18.118.13.94\", db=\"okmarts\", port=3306,\n                                       sql=\"DELETE FROM shopping_cart WHERE userid='1506910015154425856';\")\n                    time.sleep(1)\n                else:\n                    pass\n                driver.find_element(by='class name', value='num').click()\n                time.sleep(2)\n                text = driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div/div[2]/div[1]/a').text\n                print(text)\n                assert text == 'The shopping cart is still empty for the time being, go pick a few items right away'\n                driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div/div[2]/div[1]/a').click()\n                time.sleep(2)\n                text1 = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                            value=f\"{assert_way.split('=', 1)[1]}\").text\n                assert text1 == result\n            elif casename == '当商品添加数量为1时无法点击-号':\n                Mysql().drop_table(user=\"root\", pwd=\"OKmarts888.,\", host=\"18.118.13.94\", db=\"okmarts\", port=3306,\n                                   sql=\"DELETE FROM shopping_cart WHERE userid='1506910015154425856';\")\n                time.sleep(1)\n                self.add_goods_to_shopcar(driver)  # 加入商品至购物车\n                try:\n                    info = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").get_attribute(\"disabled\")\n                    print(info)\n                    assert info == result\n                except:\n                    assert False\n            elif casename == '购物车内包含商品时，购物车图标显示正确':\n                goods_number = driver.find_element(by='class name', value='num').text  # 判断购物车是否有商品\n                print(goods_number)\n                if goods_number == '0':  # 如果商品数量为0\n                    self.add_goods_to_shopcar(driver)\n                    goods_number2 = driver.find_element(by='class name', value='num').text  # 判断购物车商品数量有无增加\n                    print(goods_number2)\n                    assert int(goods_number2) == int(goods_number) + 1\n                elif goods_number == '99+':\n                    driver.find_element(by='class name', value='num').click()  # 点击购物车\n                    time.sleep(2)\n                    driver.find_element(by='css selector', value='label[class=\"ant-checkbox-wrapper\"]').click()  # 点击勾选全部\n                    time.sleep(0.5)\n                    driver.find_element(by='css selector', value='#app > div > div > div.ui-container > div.content.flex.space-between > div.auction-info > '\n                                                                 'div.title-1.flex.align-center.space-between > div.action.text-blue > a').click()  # 点击删除\n                    time.sleep(0.5)\n                    driver.find_element(by='class name', value='ant-btn.ant-btn-primary.ant-btn-sm').click()  # 点击确认\n                    time.sleep(3)\n                    goods_number2 = driver.find_element(by='class name', value='num').text  # 判断购物车商品数量有无增加\n                    print(goods_number2)\n                    assert goods_number2 == '0'\n                else:  # 否则则为0-99+ 中的值\n                    driver.find_element(by='class name', value='num').click()  # 点击购物车\n                    time.sleep(2)\n                    driver.find_element(by='css selector', value='svg[p-id=\"3096\"]').click()  # 点击加\n                    time.sleep(3)\n                    goods_number2 = driver.find_element(by='class name', value='num').text  # 判断购物车商品数量有无增加\n                    print(goods_number2)\n                    assert int(goods_number2) == int(goods_number) + 1\n                    driver.find_element(by='css selector', value='svg[p-id=\"2909\"]').click()  # 点击减\n                    time.sleep(3)\n                    goods_number3 = driver.find_element(by='class name', value='num').text  # 判断购物车商品数量有无减少\n                    assert goods_number3 == goods_number\n            elif casename == '购物车数量大于99时，购物车略缩图显示99+':\n                self.add_goods_to_shopcar(driver)\n                driver.find_element(by='class name', value='input.ant-input').send_keys(Keys.CONTROL, 'a')\n                time.sleep(0.5)\n                driver.find_element(by='class name', value='input.ant-input').send_keys('100')\n                time.sleep(3)\n                goods_number = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                                   value=f\"{assert_way.split('=', 1)[1]}\").text\n                print(goods_number)\n>               assert goods_number == result\nE               AssertionError\n\n..\\mode\\shop_car.py:127: AssertionError",
    "steps" : [ {
      "name" : "添加失败截图...",
      "time" : {
        "start" : 1651739655417,
        "stop" : 1651739655570,
        "duration" : 153
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "d54196dbf6049065",
        "name" : "失败截图",
        "source" : "d54196dbf6049065.png",
        "type" : "image/png",
        "size" : 111249
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "cf8ec13abb821a1a",
      "name" : "stdout",
      "source" : "cf8ec13abb821a1a.txt",
      "type" : "text/plain",
      "size" : 51
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1651739721148,
      "stop" : 1651739721616,
      "duration" : 468
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "driver::0",
    "time" : {
      "start" : 1651739721619,
      "stop" : 1651739721619,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "购物车"
  }, {
    "name" : "suite",
    "value" : "test_main"
  }, {
    "name" : "subSuite",
    "value" : "Test_Main"
  }, {
    "name" : "host",
    "value" : "DESKTOP-NB3FDE0"
  }, {
    "name" : "thread",
    "value" : "23944-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_main"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "Parameter",
    "value" : "{'case_no': '', 'casename': '购物车数量大于99时，购物车略缩图显示99+', 'mode': '购物车', 'data': '', 'assert_way': 'class name=num', 'result': '99+'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "2e5c504d6b372ed0.json",
  "parameterValues" : [ "{'case_no': '', 'casename': '购物车数量大于99时，购物车略缩图显示99+', 'mode': '购物车', 'data': '', 'assert_way': 'class name=num', 'result': '99+'}" ]
}