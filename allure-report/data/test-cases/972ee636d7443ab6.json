{
  "uid" : "972ee636d7443ab6",
  "name" : "密码为小写字母+特殊字符注册失败",
  "fullName" : "test_main.Test_Main#test_regist",
  "historyId" : "4db67c3151e1045c8a214ecc5e16be50",
  "time" : {
    "start" : 1651737786854,
    "stop" : 1651737803290,
    "duration" : 16436
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <okmarts_ui_test.mode.register.Regist object at 0x0000019A42F096D0>\nParameter = {'assert_way': 'xpath=/html/body/div[3]/div/div/div/div[2]/div/div/div', 'case_no': '25', 'casename': '密码为小写字母+特殊字符注册失败', 'data': 'useraccount=a883774917@163.com\\npassword=asdf！@#￥', ...}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"393be1dc5d8969509f153a9f15ae2e9e\")>\n\n    def regist(self, Parameter, driver):\n        casename = Parameter['casename']\n        mode = Parameter['mode']\n        data = Parameter['data'].split('\\n')\n        if casename == '用户名邮箱为空下一步操作置灰':\n            useraccount = data[0].split('=')[-1]\n        elif casename == '输入已存在的用户名注册失败':\n            useraccount = '979172251@qq.com'\n        else:\n            useraccount = Common().random_email_account()\n    \n        assert_way = Parameter['assert_way']\n        result = Parameter['result']\n        driver.get('http://18.118.13.94:81/my/register')\n        time.sleep(0.5)\n        driver.find_element(by='id', value='register_step_1_userAccount').send_keys(useraccount)\n    \n        if casename == '不勾选用户协议注册失败':\n            driver.find_element(by='class name', value='ant-checkbox').click()\n        else:\n            pass\n    \n        driver.find_element(by='xpath',\n                            value='//*[@id=\"app\"]/div/div[1]/div[2]/form/div[3]/div/div/span/div/button/a').click()  # 点击下一步发送验证码\n    \n        if casename == '用户名邮箱为空下一步操作置灰':\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").get_attribute('disabled')\n            print('通道1')\n            print(text)\n            assert text == result\n        elif casename == '关闭验证码页面成功':\n            time.sleep(3)\n            # print(self.dr.find_element(by='class name', value='ant-modal-body').is_displayed())\n            driver.find_element(by='class name', value='anticon.anticon-close.ant-modal-close-icon').click()\n            time.sleep(0.5)\n            assert driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").is_displayed() is not result\n        elif casename == '使用过期验证码验证失败':\n            code = Get_Code().wangyi(username=useraccount, password='Qwe3541118', name='hydraulic', no=2)  # 获取验证码\n            self.input_code(driver, code)\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道2')\n            print(text)\n            assert text == result\n        elif casename == '输入错误验证码注册失败':\n            self.input_code(driver, ['111111'])\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道3')\n            print(text)\n            assert text == result\n        elif casename == '超时后再次发送验证码成功':\n            time.sleep(63)\n            driver.find_element(by='xpath', value='/html/body/div[2]/div/div[2]/div/div[2]/div/div/div[2]/a').click()\n            time.sleep(3)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道4')\n            print(text)\n            assert text == result\n        elif casename in ['邮箱不含@弹出错误提示', '输入已存在的用户名注册失败', '不勾选用户协议注册失败']:\n            time.sleep(1)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道5')\n            print(text)\n            assert text == result\n        elif casename == '注册完成后领取优惠卷成功':\n            self.regist_mode1(useraccount, driver, data)\n            try:\n                driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div[5]/img').click()  # 点击礼物箱\n            except NoSuchElementException:\n                time.sleep(1)\n                driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div[5]/img').click()  # 点击礼物箱 如果报错等待1S 再次点击\n            time.sleep(0.2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            text = driver.find_element(by='xpath', value='/html/body/div[2]/span/div/div/div/span').text\n            print(text)\n            Common().login(driver,useraccount,password=data[1].split('=')[-1])\n            WebDriverWait(driver,30,0.2).until(lambda x:x.find_element_by_css_selector('#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1) > span'))\n            driver.find_element(by='css selector', value='#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1) > span').click()\n            time.sleep(1.5)\n            coupons_text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道6')\n            print(coupons_text)\n            assert text == 'success' and coupons_text == result\n        elif casename == '领取优惠卷回退页面再次领取失败':\n            self.regist_mode1(useraccount, driver, data)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div[5]/img').click()  # 点击礼物箱\n            time.sleep(0.2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            driver.back()\n            time.sleep(2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            Common().login(driver,useraccount,password=data[1].split('=')[-1])   #登录\n            driver.find_element(by='css selector', value='#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1) > span > p').click()\n            time.sleep(1.5)\n            coupons_text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道7')\n            print(coupons_text)\n            assert coupons_text == result\n        elif casename == '不进行验证注册失败':\n            print('通道0')\n            time.sleep(10)      #等待验证码发送至邮箱\n            code = Get_Code().wangyi(username=useraccount, password='Qwe3541118', name='hydraulic', no=1)  # 获取验证码\n            print(code[0])\n            self.input_code(driver, code)\n            time.sleep(2)\n            driver.find_element(by='css selector',value='#app > div > div.login-form-wrap > '\n                                                        'div.login-form.margin-bottom > form > div:nth-child(1) > div'\n                                                        ' > div > span > span > input').send_keys(data[1].split('=')[-1]) # 输入密码\n    \n            time.sleep(0.5)\n            driver.find_element(by=\"css selector\",\n                                value='#app > div > div.login-form-wrap > div.login-form.margin-bottom > form > '\n                                      'div.btn-out.ant-row.ant-form-item > div > div > span > div > a').click()  # 点击下一步\n            WebDriverWait(driver,30,0.2).until(lambda driver:driver.find_element(by='css selector',value='body > div.ant-message > span > div > div > div > span'))\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(f'text 为{text}')\n            print(f'result 为{result}')\n            assert text == result\n        else:\n            try:\n>               self.regist_mode1(useraccount, driver, data)\n\n..\\mode\\register.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.register.Regist object at 0x0000019A42F096D0>\nuseraccount = 'a883774920@163.com'\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"393be1dc5d8969509f153a9f15ae2e9e\")>\ndata = ['useraccount=a883774917@163.com', 'password=asdf！@#￥']\n\n    def regist_mode1(self, useraccount, driver, data):\n        time.sleep(10)\n>       code = Get_Code().wangyi(username=useraccount, password='Qwe3541118', name='hydraulic', no=1)  # 获取验证码\n\n..\\mode\\register.py:194: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.get_code.Get_Code object at 0x0000019A4266FCA0>\n\n    def __init__(self):\n>       self.dr = webdriver.Edge()  # 打开另一个浏览器\n\n..\\mode\\get_code.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.edge.webdriver.WebDriver (session=\"None\")>\nexecutable_path = 'msedgedriver', port = 0\noptions = <selenium.webdriver.edge.options.Options object at 0x0000019A41F40520>\nservice_args = None, capabilities = None, service_log_path = None\nservice = <selenium.webdriver.edge.service.Service object at 0x0000019A42F096A0>\nkeep_alive = False, verbose = False\n\n    def __init__(self, executable_path=DEFAULT_EXECUTEABLE_PATH, port=DEFAULT_PORT,\n                 options: Options = Options(), service_args=None,\n                 capabilities=None, service_log_path=DEFAULT_SERVICE_LOG_PATH,\n                 service: Service = None, keep_alive=False, verbose=False):\n        \"\"\"\n        Creates a new instance of the edge driver.\n        Starts the service and then creates new instance of edge driver.\n    \n        :Args:\n         - executable_path - Deprecated: path to the executable. If the default is used it assumes the executable is in the $PATH\n         - port - Deprecated: port you would like the service to run, if left as 0, a free port will be found.\n         - options - this takes an instance of EdgeOptions\n         - service_args - Deprecated: List of args to pass to the driver service\n         - capabilities - Deprecated: Dictionary object with non-browser specific\n           capabilities only, such as \"proxy\" or \"loggingPref\".\n         - service_log_path - Deprecated: Where to log information from the driver.\n         - service - Service object for handling the browser driver if you need to pass extra details\n         - keep_alive - Whether to configure EdgeRemoteConnection to use HTTP keep-alive.\n         - verbose - whether to set verbose logging in the service.\n         \"\"\"\n        if executable_path != 'msedgedriver':\n            warnings.warn('executable_path has been deprecated, please pass in a Service object',\n                          DeprecationWarning, stacklevel=2)\n    \n        if not service:\n            service = Service(executable_path, port, service_args, service_log_path)\n    \n>       super(WebDriver, self).__init__(DesiredCapabilities.EDGE['browserName'], \"ms\",\n                                        port, options,\n                                        service_args, capabilities,\n                                        service_log_path, service, keep_alive)\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.edge.webdriver.WebDriver (session=\"None\")>\nbrowser_name = 'MicrosoftEdge', vendor_prefix = 'ms', port = 0\noptions = <selenium.webdriver.edge.options.Options object at 0x0000019A41F40520>\nservice_args = None, desired_capabilities = None, service_log_path = None\nservice = <selenium.webdriver.edge.service.Service object at 0x0000019A42F096A0>\nkeep_alive = True\n\n    def __init__(self, browser_name, vendor_prefix,\n                 port=DEFAULT_PORT, options: BaseOptions = None, service_args=None,\n                 desired_capabilities=None, service_log_path=DEFAULT_SERVICE_LOG_PATH,\n                 service: Service = None, keep_alive=DEFAULT_KEEP_ALIVE):\n        \"\"\"\n        Creates a new WebDriver instance of the ChromiumDriver.\n        Starts the service and then creates new WebDriver instance of ChromiumDriver.\n    \n        :Args:\n         - browser_name - Browser name used when matching capabilities.\n         - vendor_prefix - Company prefix to apply to vendor-specific WebDriver extension commands.\n         - port - Deprecated: port you would like the service to run, if left as 0, a free port will be found.\n         - options - this takes an instance of ChromiumOptions\n         - service_args - Deprecated: List of args to pass to the driver service\n         - desired_capabilities - Deprecated: Dictionary object with non-browser specific\n           capabilities only, such as \"proxy\" or \"loggingPref\".\n         - service_log_path - Deprecated: Where to log information from the driver.\n         - keep_alive - Deprecated: Whether to configure ChromiumRemoteConnection to use HTTP keep-alive.\n        \"\"\"\n        if desired_capabilities:\n            warnings.warn('desired_capabilities has been deprecated, please pass in a Service object',\n                          DeprecationWarning, stacklevel=2)\n        if port != DEFAULT_PORT:\n            warnings.warn('port has been deprecated, please pass in a Service object',\n                          DeprecationWarning, stacklevel=2)\n        self.port = port\n        if service_log_path != DEFAULT_SERVICE_LOG_PATH:\n            warnings.warn('service_log_path has been deprecated, please pass in a Service object',\n                          DeprecationWarning, stacklevel=2)\n        if keep_alive != DEFAULT_KEEP_ALIVE and type(self) == __class__:\n            warnings.warn('keep_alive has been deprecated, please pass in a Service object',\n                          DeprecationWarning, stacklevel=2)\n        else:\n            keep_alive = True\n    \n        self.vendor_prefix = vendor_prefix\n    \n        _ignore_proxy = None\n        if not options:\n            options = self.create_options()\n    \n        if desired_capabilities:\n            for key, value in desired_capabilities.items():\n                options.set_capability(key, value)\n    \n        if options._ignore_local_proxy:\n            _ignore_proxy = options._ignore_local_proxy\n    \n        if not service:\n            raise AttributeError('service cannot be None')\n    \n        self.service = service\n        self.service.start()\n    \n        try:\n>           RemoteWebDriver.__init__(\n                self,\n                command_executor=ChromiumRemoteConnection(\n                    remote_server_addr=self.service.service_url,\n                    browser_name=browser_name, vendor_prefix=vendor_prefix,\n                    keep_alive=keep_alive, ignore_proxy=_ignore_proxy),\n                options=options)\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.edge.webdriver.WebDriver (session=\"None\")>\ncommand_executor = <selenium.webdriver.chromium.remote_connection.ChromiumRemoteConnection object at 0x0000019A42F097F0>\ndesired_capabilities = None, browser_profile = None, proxy = None\nkeep_alive = True, file_detector = None\noptions = <selenium.webdriver.edge.options.Options object at 0x0000019A41F40520>\n\n    def __init__(self, command_executor='http://127.0.0.1:4444',\n                 desired_capabilities=None, browser_profile=None, proxy=None,\n                 keep_alive=True, file_detector=None, options: Union[BaseOptions, List[BaseOptions]] = None):\n        \"\"\"\n        Create a new driver that will issue commands using the wire protocol.\n    \n        :Args:\n         - command_executor - Either a string representing URL of the remote server or a custom\n             remote_connection.RemoteConnection object. Defaults to 'http://127.0.0.1:4444/wd/hub'.\n         - desired_capabilities - A dictionary of capabilities to request when\n             starting the browser session. Required parameter.\n         - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.\n             Only used if Firefox is requested. Optional.\n         - proxy - A selenium.webdriver.common.proxy.Proxy object. The browser session will\n             be started with given proxy settings, if possible. Optional.\n         - keep_alive - Whether to configure remote_connection.RemoteConnection to use\n             HTTP keep-alive. Defaults to True.\n         - file_detector - Pass custom file detector object during instantiation. If None,\n             then default LocalFileDetector() will be used.\n         - options - instance of a driver options.Options class\n        \"\"\"\n        if desired_capabilities:\n            warnings.warn(\n                \"desired_capabilities has been deprecated, please pass in an Options object with options kwarg\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n        if browser_profile:\n            warnings.warn(\n                \"browser_profile has been deprecated, please pass in an Firefox Options object with options kwarg\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n        if proxy:\n            warnings.warn(\n                \"proxy has been deprecated, please pass in an Options object with options kwarg\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n        if not keep_alive:\n            warnings.warn(\n                \"keep_alive has been deprecated. We will be using True as the default value as we start removing it.\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n        capabilities = {}\n        # If we get a list we can assume that no capabilities\n        # have been passed in\n        if isinstance(options, list):\n            capabilities = create_matches(options)\n        else:\n            _ignore_local_proxy = False\n            if options:\n                capabilities = options.to_capabilities()\n                _ignore_local_proxy = options._ignore_local_proxy\n            if desired_capabilities:\n                if not isinstance(desired_capabilities, dict):\n                    raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n                else:\n                    capabilities.update(desired_capabilities)\n        self.command_executor = command_executor\n        if isinstance(self.command_executor, (str, bytes)):\n            self.command_executor = get_remote_connection(capabilities, command_executor=command_executor,\n                                                          keep_alive=keep_alive,\n                                                          ignore_local_proxy=_ignore_local_proxy)\n        self._is_remote = True\n        self.session_id = None\n        self.caps = {}\n        self.pinned_scripts = {}\n        self.error_handler = ErrorHandler()\n        self._switch_to = SwitchTo(self)\n        self._mobile = Mobile(self)\n        self.file_detector = file_detector or LocalFileDetector()\n        self.start_client()\n>       self.start_session(capabilities, browser_profile)\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:268: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.edge.webdriver.WebDriver (session=\"None\")>\ncapabilities = {'browserName': 'MicrosoftEdge', 'ms:edgeOptions': {'args': [], 'extensions': []}, 'pageLoadStrategy': 'normal'}\nbrowser_profile = None\n\n    def start_session(self, capabilities: dict, browser_profile=None) -> None:\n        \"\"\"\n        Creates a new session with the desired capabilities.\n    \n        :Args:\n         - capabilities - a capabilities dict to start the session with.\n         - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n        \"\"\"\n        if not isinstance(capabilities, dict):\n            raise InvalidArgumentException(\"Capabilities must be a dictionary\")\n        if browser_profile:\n            if \"moz:firefoxOptions\" in capabilities:\n                capabilities[\"moz:firefoxOptions\"][\"profile\"] = browser_profile.encoded\n            else:\n                capabilities.update({'firefox_profile': browser_profile.encoded})\n        w3c_caps = _make_w3c_caps(capabilities)\n        parameters = {\"capabilities\": w3c_caps,\n                      \"desiredCapabilities\": capabilities}\n>       response = self.execute(Command.NEW_SESSION, parameters)\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:359: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.edge.webdriver.WebDriver (session=\"None\")>\ndriver_command = 'newSession'\nparams = {'capabilities': {'alwaysMatch': {'browserName': 'MicrosoftEdge', 'ms:edgeOptions': {'args': [], 'extensions': []}, 'p...ies': {'browserName': 'MicrosoftEdge', 'ms:edgeOptions': {'args': [], 'extensions': []}, 'pageLoadStrategy': 'normal'}}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000019A42F09D00>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of MSEd...DA48BE+605710]\\\\n\\\\tBaseThreadInitThunk [0x00007FFB3F2854E0+16]\\\\n\\\\tRtlUserThreadStart [0x00007FFB4090485B+43]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of MSEdgeDriver only supports MSEdge version 99\nE       Current browser version is 101.0.1210.32 with binary path C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\nE       Stacktrace:\nE       Backtrace:\nE       \tMicrosoft::Applications::Events::EventProperties::unpack [0x00007FF68FE51922+25346]\nE       \tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF68FD8E982+515794]\nE       \tOrdinal0 [0x00007FF68F8A0BC5+658373]\nE       \tOrdinal0 [0x00007FF68F8CB5E0+832992]\nE       \tOrdinal0 [0x00007FF68F8C6B7E+813950]\nE       \tOrdinal0 [0x00007FF68F8C24EE+795886]\nE       \tOrdinal0 [0x00007FF68F8FC366+1033062]\nE       \tOrdinal0 [0x00007FF68F8F6A53+1010259]\nE       \tOrdinal0 [0x00007FF68F8CDB47+842567]\nE       \tOrdinal0 [0x00007FF68F8CF018+847896]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF68FA5F1C8+827304]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF68FB49389+34681]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF68FB4C562+47442]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF68F99C6D6+29878]\nE       \tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF68FD95971+544449]\nE       \tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF68FD9A974+564932]\nE       \tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF68FD9AACD+565277]\nE       \tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF68FDA48BE+605710]\nE       \tBaseThreadInitThunk [0x00007FFB3F2854E0+16]\nE       \tRtlUserThreadStart [0x00007FFB4090485B+43]\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: SessionNotCreatedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_main.Test_Main object at 0x0000019A4266F250>\nParameter = {'assert_way': 'xpath=/html/body/div[3]/div/div/div/div[2]/div/div/div', 'case_no': '25', 'casename': '密码为小写字母+特殊字符注册失败', 'data': 'useraccount=a883774917@163.com\\npassword=asdf！@#￥', ...}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"393be1dc5d8969509f153a9f15ae2e9e\")>\n\n    @allure.feature('注册')\n    @pytest.mark.parametrize('Parameter', case_infos['registe'], ids=casename_infos['registe'])\n    def test_regist(self, Parameter, driver):\n        allure.dynamic.title(Parameter['casename'])  # 测试用例名称\n>       Regist().regist(Parameter, driver)\n\ntest_main.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.register.Regist object at 0x0000019A42F096D0>\nParameter = {'assert_way': 'xpath=/html/body/div[3]/div/div/div/div[2]/div/div/div', 'case_no': '25', 'casename': '密码为小写字母+特殊字符注册失败', 'data': 'useraccount=a883774917@163.com\\npassword=asdf！@#￥', ...}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"393be1dc5d8969509f153a9f15ae2e9e\")>\n\n    def regist(self, Parameter, driver):\n        casename = Parameter['casename']\n        mode = Parameter['mode']\n        data = Parameter['data'].split('\\n')\n        if casename == '用户名邮箱为空下一步操作置灰':\n            useraccount = data[0].split('=')[-1]\n        elif casename == '输入已存在的用户名注册失败':\n            useraccount = '979172251@qq.com'\n        else:\n            useraccount = Common().random_email_account()\n    \n        assert_way = Parameter['assert_way']\n        result = Parameter['result']\n        driver.get('http://18.118.13.94:81/my/register')\n        time.sleep(0.5)\n        driver.find_element(by='id', value='register_step_1_userAccount').send_keys(useraccount)\n    \n        if casename == '不勾选用户协议注册失败':\n            driver.find_element(by='class name', value='ant-checkbox').click()\n        else:\n            pass\n    \n        driver.find_element(by='xpath',\n                            value='//*[@id=\"app\"]/div/div[1]/div[2]/form/div[3]/div/div/span/div/button/a').click()  # 点击下一步发送验证码\n    \n        if casename == '用户名邮箱为空下一步操作置灰':\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").get_attribute('disabled')\n            print('通道1')\n            print(text)\n            assert text == result\n        elif casename == '关闭验证码页面成功':\n            time.sleep(3)\n            # print(self.dr.find_element(by='class name', value='ant-modal-body').is_displayed())\n            driver.find_element(by='class name', value='anticon.anticon-close.ant-modal-close-icon').click()\n            time.sleep(0.5)\n            assert driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").is_displayed() is not result\n        elif casename == '使用过期验证码验证失败':\n            code = Get_Code().wangyi(username=useraccount, password='Qwe3541118', name='hydraulic', no=2)  # 获取验证码\n            self.input_code(driver, code)\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道2')\n            print(text)\n            assert text == result\n        elif casename == '输入错误验证码注册失败':\n            self.input_code(driver, ['111111'])\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道3')\n            print(text)\n            assert text == result\n        elif casename == '超时后再次发送验证码成功':\n            time.sleep(63)\n            driver.find_element(by='xpath', value='/html/body/div[2]/div/div[2]/div/div[2]/div/div/div[2]/a').click()\n            time.sleep(3)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道4')\n            print(text)\n            assert text == result\n        elif casename in ['邮箱不含@弹出错误提示', '输入已存在的用户名注册失败', '不勾选用户协议注册失败']:\n            time.sleep(1)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道5')\n            print(text)\n            assert text == result\n        elif casename == '注册完成后领取优惠卷成功':\n            self.regist_mode1(useraccount, driver, data)\n            try:\n                driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div[5]/img').click()  # 点击礼物箱\n            except NoSuchElementException:\n                time.sleep(1)\n                driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div[5]/img').click()  # 点击礼物箱 如果报错等待1S 再次点击\n            time.sleep(0.2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            text = driver.find_element(by='xpath', value='/html/body/div[2]/span/div/div/div/span').text\n            print(text)\n            Common().login(driver,useraccount,password=data[1].split('=')[-1])\n            WebDriverWait(driver,30,0.2).until(lambda x:x.find_element_by_css_selector('#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1) > span'))\n            driver.find_element(by='css selector', value='#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1) > span').click()\n            time.sleep(1.5)\n            coupons_text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道6')\n            print(coupons_text)\n            assert text == 'success' and coupons_text == result\n        elif casename == '领取优惠卷回退页面再次领取失败':\n            self.regist_mode1(useraccount, driver, data)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div[5]/img').click()  # 点击礼物箱\n            time.sleep(0.2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            driver.back()\n            time.sleep(2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            Common().login(driver,useraccount,password=data[1].split('=')[-1])   #登录\n            driver.find_element(by='css selector', value='#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1) > span > p').click()\n            time.sleep(1.5)\n            coupons_text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道7')\n            print(coupons_text)\n            assert coupons_text == result\n        elif casename == '不进行验证注册失败':\n            print('通道0')\n            time.sleep(10)      #等待验证码发送至邮箱\n            code = Get_Code().wangyi(username=useraccount, password='Qwe3541118', name='hydraulic', no=1)  # 获取验证码\n            print(code[0])\n            self.input_code(driver, code)\n            time.sleep(2)\n            driver.find_element(by='css selector',value='#app > div > div.login-form-wrap > '\n                                                        'div.login-form.margin-bottom > form > div:nth-child(1) > div'\n                                                        ' > div > span > span > input').send_keys(data[1].split('=')[-1]) # 输入密码\n    \n            time.sleep(0.5)\n            driver.find_element(by=\"css selector\",\n                                value='#app > div > div.login-form-wrap > div.login-form.margin-bottom > form > '\n                                      'div.btn-out.ant-row.ant-form-item > div > div > span > div > a').click()  # 点击下一步\n            WebDriverWait(driver,30,0.2).until(lambda driver:driver.find_element(by='css selector',value='body > div.ant-message > span > div > div > div > span'))\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(f'text 为{text}')\n            print(f'result 为{result}')\n            assert text == result\n        else:\n            try:\n                self.regist_mode1(useraccount, driver, data)\n                text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                           value=f\"{assert_way.split('=', 1)[1]}\").text\n                print('通道0')\n                print(text)\n                assert text == result\n            except :\n>               raise AssertionError\nE               AssertionError\n\n..\\mode\\register.py:162: AssertionError",
  "flaky" : false,
  "newFailed" : true,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "driver",
    "time" : {
      "start" : 1651737471434,
      "stop" : 1651737473198,
      "duration" : 1764
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1651737473198,
      "stop" : 1651737473199,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <okmarts_ui_test.mode.register.Regist object at 0x0000019A42F096D0>\nParameter = {'assert_way': 'xpath=/html/body/div[3]/div/div/div/div[2]/div/div/div', 'case_no': '25', 'casename': '密码为小写字母+特殊字符注册失败', 'data': 'useraccount=a883774917@163.com\\npassword=asdf！@#￥', ...}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"393be1dc5d8969509f153a9f15ae2e9e\")>\n\n    def regist(self, Parameter, driver):\n        casename = Parameter['casename']\n        mode = Parameter['mode']\n        data = Parameter['data'].split('\\n')\n        if casename == '用户名邮箱为空下一步操作置灰':\n            useraccount = data[0].split('=')[-1]\n        elif casename == '输入已存在的用户名注册失败':\n            useraccount = '979172251@qq.com'\n        else:\n            useraccount = Common().random_email_account()\n    \n        assert_way = Parameter['assert_way']\n        result = Parameter['result']\n        driver.get('http://18.118.13.94:81/my/register')\n        time.sleep(0.5)\n        driver.find_element(by='id', value='register_step_1_userAccount').send_keys(useraccount)\n    \n        if casename == '不勾选用户协议注册失败':\n            driver.find_element(by='class name', value='ant-checkbox').click()\n        else:\n            pass\n    \n        driver.find_element(by='xpath',\n                            value='//*[@id=\"app\"]/div/div[1]/div[2]/form/div[3]/div/div/span/div/button/a').click()  # 点击下一步发送验证码\n    \n        if casename == '用户名邮箱为空下一步操作置灰':\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").get_attribute('disabled')\n            print('通道1')\n            print(text)\n            assert text == result\n        elif casename == '关闭验证码页面成功':\n            time.sleep(3)\n            # print(self.dr.find_element(by='class name', value='ant-modal-body').is_displayed())\n            driver.find_element(by='class name', value='anticon.anticon-close.ant-modal-close-icon').click()\n            time.sleep(0.5)\n            assert driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").is_displayed() is not result\n        elif casename == '使用过期验证码验证失败':\n            code = Get_Code().wangyi(username=useraccount, password='Qwe3541118', name='hydraulic', no=2)  # 获取验证码\n            self.input_code(driver, code)\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道2')\n            print(text)\n            assert text == result\n        elif casename == '输入错误验证码注册失败':\n            self.input_code(driver, ['111111'])\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道3')\n            print(text)\n            assert text == result\n        elif casename == '超时后再次发送验证码成功':\n            time.sleep(63)\n            driver.find_element(by='xpath', value='/html/body/div[2]/div/div[2]/div/div[2]/div/div/div[2]/a').click()\n            time.sleep(3)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道4')\n            print(text)\n            assert text == result\n        elif casename in ['邮箱不含@弹出错误提示', '输入已存在的用户名注册失败', '不勾选用户协议注册失败']:\n            time.sleep(1)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道5')\n            print(text)\n            assert text == result\n        elif casename == '注册完成后领取优惠卷成功':\n            self.regist_mode1(useraccount, driver, data)\n            try:\n                driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div[5]/img').click()  # 点击礼物箱\n            except NoSuchElementException:\n                time.sleep(1)\n                driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div[5]/img').click()  # 点击礼物箱 如果报错等待1S 再次点击\n            time.sleep(0.2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            text = driver.find_element(by='xpath', value='/html/body/div[2]/span/div/div/div/span').text\n            print(text)\n            Common().login(driver,useraccount,password=data[1].split('=')[-1])\n            WebDriverWait(driver,30,0.2).until(lambda x:x.find_element_by_css_selector('#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1) > span'))\n            driver.find_element(by='css selector', value='#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1) > span').click()\n            time.sleep(1.5)\n            coupons_text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道6')\n            print(coupons_text)\n            assert text == 'success' and coupons_text == result\n        elif casename == '领取优惠卷回退页面再次领取失败':\n            self.regist_mode1(useraccount, driver, data)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div[5]/img').click()  # 点击礼物箱\n            time.sleep(0.2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            driver.back()\n            time.sleep(2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            Common().login(driver,useraccount,password=data[1].split('=')[-1])   #登录\n            driver.find_element(by='css selector', value='#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1) > span > p').click()\n            time.sleep(1.5)\n            coupons_text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道7')\n            print(coupons_text)\n            assert coupons_text == result\n        elif casename == '不进行验证注册失败':\n            print('通道0')\n            time.sleep(10)      #等待验证码发送至邮箱\n            code = Get_Code().wangyi(username=useraccount, password='Qwe3541118', name='hydraulic', no=1)  # 获取验证码\n            print(code[0])\n            self.input_code(driver, code)\n            time.sleep(2)\n            driver.find_element(by='css selector',value='#app > div > div.login-form-wrap > '\n                                                        'div.login-form.margin-bottom > form > div:nth-child(1) > div'\n                                                        ' > div > span > span > input').send_keys(data[1].split('=')[-1]) # 输入密码\n    \n            time.sleep(0.5)\n            driver.find_element(by=\"css selector\",\n                                value='#app > div > div.login-form-wrap > div.login-form.margin-bottom > form > '\n                                      'div.btn-out.ant-row.ant-form-item > div > div > span > div > a').click()  # 点击下一步\n            WebDriverWait(driver,30,0.2).until(lambda driver:driver.find_element(by='css selector',value='body > div.ant-message > span > div > div > div > span'))\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(f'text 为{text}')\n            print(f'result 为{result}')\n            assert text == result\n        else:\n            try:\n>               self.regist_mode1(useraccount, driver, data)\n\n..\\mode\\register.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.register.Regist object at 0x0000019A42F096D0>\nuseraccount = 'a883774920@163.com'\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"393be1dc5d8969509f153a9f15ae2e9e\")>\ndata = ['useraccount=a883774917@163.com', 'password=asdf！@#￥']\n\n    def regist_mode1(self, useraccount, driver, data):\n        time.sleep(10)\n>       code = Get_Code().wangyi(username=useraccount, password='Qwe3541118', name='hydraulic', no=1)  # 获取验证码\n\n..\\mode\\register.py:194: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.get_code.Get_Code object at 0x0000019A4266FCA0>\n\n    def __init__(self):\n>       self.dr = webdriver.Edge()  # 打开另一个浏览器\n\n..\\mode\\get_code.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.edge.webdriver.WebDriver (session=\"None\")>\nexecutable_path = 'msedgedriver', port = 0\noptions = <selenium.webdriver.edge.options.Options object at 0x0000019A41F40520>\nservice_args = None, capabilities = None, service_log_path = None\nservice = <selenium.webdriver.edge.service.Service object at 0x0000019A42F096A0>\nkeep_alive = False, verbose = False\n\n    def __init__(self, executable_path=DEFAULT_EXECUTEABLE_PATH, port=DEFAULT_PORT,\n                 options: Options = Options(), service_args=None,\n                 capabilities=None, service_log_path=DEFAULT_SERVICE_LOG_PATH,\n                 service: Service = None, keep_alive=False, verbose=False):\n        \"\"\"\n        Creates a new instance of the edge driver.\n        Starts the service and then creates new instance of edge driver.\n    \n        :Args:\n         - executable_path - Deprecated: path to the executable. If the default is used it assumes the executable is in the $PATH\n         - port - Deprecated: port you would like the service to run, if left as 0, a free port will be found.\n         - options - this takes an instance of EdgeOptions\n         - service_args - Deprecated: List of args to pass to the driver service\n         - capabilities - Deprecated: Dictionary object with non-browser specific\n           capabilities only, such as \"proxy\" or \"loggingPref\".\n         - service_log_path - Deprecated: Where to log information from the driver.\n         - service - Service object for handling the browser driver if you need to pass extra details\n         - keep_alive - Whether to configure EdgeRemoteConnection to use HTTP keep-alive.\n         - verbose - whether to set verbose logging in the service.\n         \"\"\"\n        if executable_path != 'msedgedriver':\n            warnings.warn('executable_path has been deprecated, please pass in a Service object',\n                          DeprecationWarning, stacklevel=2)\n    \n        if not service:\n            service = Service(executable_path, port, service_args, service_log_path)\n    \n>       super(WebDriver, self).__init__(DesiredCapabilities.EDGE['browserName'], \"ms\",\n                                        port, options,\n                                        service_args, capabilities,\n                                        service_log_path, service, keep_alive)\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.edge.webdriver.WebDriver (session=\"None\")>\nbrowser_name = 'MicrosoftEdge', vendor_prefix = 'ms', port = 0\noptions = <selenium.webdriver.edge.options.Options object at 0x0000019A41F40520>\nservice_args = None, desired_capabilities = None, service_log_path = None\nservice = <selenium.webdriver.edge.service.Service object at 0x0000019A42F096A0>\nkeep_alive = True\n\n    def __init__(self, browser_name, vendor_prefix,\n                 port=DEFAULT_PORT, options: BaseOptions = None, service_args=None,\n                 desired_capabilities=None, service_log_path=DEFAULT_SERVICE_LOG_PATH,\n                 service: Service = None, keep_alive=DEFAULT_KEEP_ALIVE):\n        \"\"\"\n        Creates a new WebDriver instance of the ChromiumDriver.\n        Starts the service and then creates new WebDriver instance of ChromiumDriver.\n    \n        :Args:\n         - browser_name - Browser name used when matching capabilities.\n         - vendor_prefix - Company prefix to apply to vendor-specific WebDriver extension commands.\n         - port - Deprecated: port you would like the service to run, if left as 0, a free port will be found.\n         - options - this takes an instance of ChromiumOptions\n         - service_args - Deprecated: List of args to pass to the driver service\n         - desired_capabilities - Deprecated: Dictionary object with non-browser specific\n           capabilities only, such as \"proxy\" or \"loggingPref\".\n         - service_log_path - Deprecated: Where to log information from the driver.\n         - keep_alive - Deprecated: Whether to configure ChromiumRemoteConnection to use HTTP keep-alive.\n        \"\"\"\n        if desired_capabilities:\n            warnings.warn('desired_capabilities has been deprecated, please pass in a Service object',\n                          DeprecationWarning, stacklevel=2)\n        if port != DEFAULT_PORT:\n            warnings.warn('port has been deprecated, please pass in a Service object',\n                          DeprecationWarning, stacklevel=2)\n        self.port = port\n        if service_log_path != DEFAULT_SERVICE_LOG_PATH:\n            warnings.warn('service_log_path has been deprecated, please pass in a Service object',\n                          DeprecationWarning, stacklevel=2)\n        if keep_alive != DEFAULT_KEEP_ALIVE and type(self) == __class__:\n            warnings.warn('keep_alive has been deprecated, please pass in a Service object',\n                          DeprecationWarning, stacklevel=2)\n        else:\n            keep_alive = True\n    \n        self.vendor_prefix = vendor_prefix\n    \n        _ignore_proxy = None\n        if not options:\n            options = self.create_options()\n    \n        if desired_capabilities:\n            for key, value in desired_capabilities.items():\n                options.set_capability(key, value)\n    \n        if options._ignore_local_proxy:\n            _ignore_proxy = options._ignore_local_proxy\n    \n        if not service:\n            raise AttributeError('service cannot be None')\n    \n        self.service = service\n        self.service.start()\n    \n        try:\n>           RemoteWebDriver.__init__(\n                self,\n                command_executor=ChromiumRemoteConnection(\n                    remote_server_addr=self.service.service_url,\n                    browser_name=browser_name, vendor_prefix=vendor_prefix,\n                    keep_alive=keep_alive, ignore_proxy=_ignore_proxy),\n                options=options)\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.edge.webdriver.WebDriver (session=\"None\")>\ncommand_executor = <selenium.webdriver.chromium.remote_connection.ChromiumRemoteConnection object at 0x0000019A42F097F0>\ndesired_capabilities = None, browser_profile = None, proxy = None\nkeep_alive = True, file_detector = None\noptions = <selenium.webdriver.edge.options.Options object at 0x0000019A41F40520>\n\n    def __init__(self, command_executor='http://127.0.0.1:4444',\n                 desired_capabilities=None, browser_profile=None, proxy=None,\n                 keep_alive=True, file_detector=None, options: Union[BaseOptions, List[BaseOptions]] = None):\n        \"\"\"\n        Create a new driver that will issue commands using the wire protocol.\n    \n        :Args:\n         - command_executor - Either a string representing URL of the remote server or a custom\n             remote_connection.RemoteConnection object. Defaults to 'http://127.0.0.1:4444/wd/hub'.\n         - desired_capabilities - A dictionary of capabilities to request when\n             starting the browser session. Required parameter.\n         - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.\n             Only used if Firefox is requested. Optional.\n         - proxy - A selenium.webdriver.common.proxy.Proxy object. The browser session will\n             be started with given proxy settings, if possible. Optional.\n         - keep_alive - Whether to configure remote_connection.RemoteConnection to use\n             HTTP keep-alive. Defaults to True.\n         - file_detector - Pass custom file detector object during instantiation. If None,\n             then default LocalFileDetector() will be used.\n         - options - instance of a driver options.Options class\n        \"\"\"\n        if desired_capabilities:\n            warnings.warn(\n                \"desired_capabilities has been deprecated, please pass in an Options object with options kwarg\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n        if browser_profile:\n            warnings.warn(\n                \"browser_profile has been deprecated, please pass in an Firefox Options object with options kwarg\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n        if proxy:\n            warnings.warn(\n                \"proxy has been deprecated, please pass in an Options object with options kwarg\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n        if not keep_alive:\n            warnings.warn(\n                \"keep_alive has been deprecated. We will be using True as the default value as we start removing it.\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n        capabilities = {}\n        # If we get a list we can assume that no capabilities\n        # have been passed in\n        if isinstance(options, list):\n            capabilities = create_matches(options)\n        else:\n            _ignore_local_proxy = False\n            if options:\n                capabilities = options.to_capabilities()\n                _ignore_local_proxy = options._ignore_local_proxy\n            if desired_capabilities:\n                if not isinstance(desired_capabilities, dict):\n                    raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n                else:\n                    capabilities.update(desired_capabilities)\n        self.command_executor = command_executor\n        if isinstance(self.command_executor, (str, bytes)):\n            self.command_executor = get_remote_connection(capabilities, command_executor=command_executor,\n                                                          keep_alive=keep_alive,\n                                                          ignore_local_proxy=_ignore_local_proxy)\n        self._is_remote = True\n        self.session_id = None\n        self.caps = {}\n        self.pinned_scripts = {}\n        self.error_handler = ErrorHandler()\n        self._switch_to = SwitchTo(self)\n        self._mobile = Mobile(self)\n        self.file_detector = file_detector or LocalFileDetector()\n        self.start_client()\n>       self.start_session(capabilities, browser_profile)\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:268: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.edge.webdriver.WebDriver (session=\"None\")>\ncapabilities = {'browserName': 'MicrosoftEdge', 'ms:edgeOptions': {'args': [], 'extensions': []}, 'pageLoadStrategy': 'normal'}\nbrowser_profile = None\n\n    def start_session(self, capabilities: dict, browser_profile=None) -> None:\n        \"\"\"\n        Creates a new session with the desired capabilities.\n    \n        :Args:\n         - capabilities - a capabilities dict to start the session with.\n         - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n        \"\"\"\n        if not isinstance(capabilities, dict):\n            raise InvalidArgumentException(\"Capabilities must be a dictionary\")\n        if browser_profile:\n            if \"moz:firefoxOptions\" in capabilities:\n                capabilities[\"moz:firefoxOptions\"][\"profile\"] = browser_profile.encoded\n            else:\n                capabilities.update({'firefox_profile': browser_profile.encoded})\n        w3c_caps = _make_w3c_caps(capabilities)\n        parameters = {\"capabilities\": w3c_caps,\n                      \"desiredCapabilities\": capabilities}\n>       response = self.execute(Command.NEW_SESSION, parameters)\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:359: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.edge.webdriver.WebDriver (session=\"None\")>\ndriver_command = 'newSession'\nparams = {'capabilities': {'alwaysMatch': {'browserName': 'MicrosoftEdge', 'ms:edgeOptions': {'args': [], 'extensions': []}, 'p...ies': {'browserName': 'MicrosoftEdge', 'ms:edgeOptions': {'args': [], 'extensions': []}, 'pageLoadStrategy': 'normal'}}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000019A42F09D00>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of MSEd...DA48BE+605710]\\\\n\\\\tBaseThreadInitThunk [0x00007FFB3F2854E0+16]\\\\n\\\\tRtlUserThreadStart [0x00007FFB4090485B+43]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of MSEdgeDriver only supports MSEdge version 99\nE       Current browser version is 101.0.1210.32 with binary path C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\nE       Stacktrace:\nE       Backtrace:\nE       \tMicrosoft::Applications::Events::EventProperties::unpack [0x00007FF68FE51922+25346]\nE       \tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF68FD8E982+515794]\nE       \tOrdinal0 [0x00007FF68F8A0BC5+658373]\nE       \tOrdinal0 [0x00007FF68F8CB5E0+832992]\nE       \tOrdinal0 [0x00007FF68F8C6B7E+813950]\nE       \tOrdinal0 [0x00007FF68F8C24EE+795886]\nE       \tOrdinal0 [0x00007FF68F8FC366+1033062]\nE       \tOrdinal0 [0x00007FF68F8F6A53+1010259]\nE       \tOrdinal0 [0x00007FF68F8CDB47+842567]\nE       \tOrdinal0 [0x00007FF68F8CF018+847896]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF68FA5F1C8+827304]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF68FB49389+34681]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF68FB4C562+47442]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF68F99C6D6+29878]\nE       \tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF68FD95971+544449]\nE       \tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF68FD9A974+564932]\nE       \tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF68FD9AACD+565277]\nE       \tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF68FDA48BE+605710]\nE       \tBaseThreadInitThunk [0x00007FFB3F2854E0+16]\nE       \tRtlUserThreadStart [0x00007FFB4090485B+43]\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: SessionNotCreatedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_main.Test_Main object at 0x0000019A4266F250>\nParameter = {'assert_way': 'xpath=/html/body/div[3]/div/div/div/div[2]/div/div/div', 'case_no': '25', 'casename': '密码为小写字母+特殊字符注册失败', 'data': 'useraccount=a883774917@163.com\\npassword=asdf！@#￥', ...}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"393be1dc5d8969509f153a9f15ae2e9e\")>\n\n    @allure.feature('注册')\n    @pytest.mark.parametrize('Parameter', case_infos['registe'], ids=casename_infos['registe'])\n    def test_regist(self, Parameter, driver):\n        allure.dynamic.title(Parameter['casename'])  # 测试用例名称\n>       Regist().regist(Parameter, driver)\n\ntest_main.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.register.Regist object at 0x0000019A42F096D0>\nParameter = {'assert_way': 'xpath=/html/body/div[3]/div/div/div/div[2]/div/div/div', 'case_no': '25', 'casename': '密码为小写字母+特殊字符注册失败', 'data': 'useraccount=a883774917@163.com\\npassword=asdf！@#￥', ...}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"393be1dc5d8969509f153a9f15ae2e9e\")>\n\n    def regist(self, Parameter, driver):\n        casename = Parameter['casename']\n        mode = Parameter['mode']\n        data = Parameter['data'].split('\\n')\n        if casename == '用户名邮箱为空下一步操作置灰':\n            useraccount = data[0].split('=')[-1]\n        elif casename == '输入已存在的用户名注册失败':\n            useraccount = '979172251@qq.com'\n        else:\n            useraccount = Common().random_email_account()\n    \n        assert_way = Parameter['assert_way']\n        result = Parameter['result']\n        driver.get('http://18.118.13.94:81/my/register')\n        time.sleep(0.5)\n        driver.find_element(by='id', value='register_step_1_userAccount').send_keys(useraccount)\n    \n        if casename == '不勾选用户协议注册失败':\n            driver.find_element(by='class name', value='ant-checkbox').click()\n        else:\n            pass\n    \n        driver.find_element(by='xpath',\n                            value='//*[@id=\"app\"]/div/div[1]/div[2]/form/div[3]/div/div/span/div/button/a').click()  # 点击下一步发送验证码\n    \n        if casename == '用户名邮箱为空下一步操作置灰':\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").get_attribute('disabled')\n            print('通道1')\n            print(text)\n            assert text == result\n        elif casename == '关闭验证码页面成功':\n            time.sleep(3)\n            # print(self.dr.find_element(by='class name', value='ant-modal-body').is_displayed())\n            driver.find_element(by='class name', value='anticon.anticon-close.ant-modal-close-icon').click()\n            time.sleep(0.5)\n            assert driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").is_displayed() is not result\n        elif casename == '使用过期验证码验证失败':\n            code = Get_Code().wangyi(username=useraccount, password='Qwe3541118', name='hydraulic', no=2)  # 获取验证码\n            self.input_code(driver, code)\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道2')\n            print(text)\n            assert text == result\n        elif casename == '输入错误验证码注册失败':\n            self.input_code(driver, ['111111'])\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道3')\n            print(text)\n            assert text == result\n        elif casename == '超时后再次发送验证码成功':\n            time.sleep(63)\n            driver.find_element(by='xpath', value='/html/body/div[2]/div/div[2]/div/div[2]/div/div/div[2]/a').click()\n            time.sleep(3)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道4')\n            print(text)\n            assert text == result\n        elif casename in ['邮箱不含@弹出错误提示', '输入已存在的用户名注册失败', '不勾选用户协议注册失败']:\n            time.sleep(1)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道5')\n            print(text)\n            assert text == result\n        elif casename == '注册完成后领取优惠卷成功':\n            self.regist_mode1(useraccount, driver, data)\n            try:\n                driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div[5]/img').click()  # 点击礼物箱\n            except NoSuchElementException:\n                time.sleep(1)\n                driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div[5]/img').click()  # 点击礼物箱 如果报错等待1S 再次点击\n            time.sleep(0.2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            text = driver.find_element(by='xpath', value='/html/body/div[2]/span/div/div/div/span').text\n            print(text)\n            Common().login(driver,useraccount,password=data[1].split('=')[-1])\n            WebDriverWait(driver,30,0.2).until(lambda x:x.find_element_by_css_selector('#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1) > span'))\n            driver.find_element(by='css selector', value='#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1) > span').click()\n            time.sleep(1.5)\n            coupons_text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道6')\n            print(coupons_text)\n            assert text == 'success' and coupons_text == result\n        elif casename == '领取优惠卷回退页面再次领取失败':\n            self.regist_mode1(useraccount, driver, data)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div[5]/img').click()  # 点击礼物箱\n            time.sleep(0.2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            driver.back()\n            time.sleep(2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            Common().login(driver,useraccount,password=data[1].split('=')[-1])   #登录\n            driver.find_element(by='css selector', value='#app > div > div.global-header > div > div.menu-content > div.menu-right.flex > div:nth-child(1) > span > p').click()\n            time.sleep(1.5)\n            coupons_text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n            print('通道7')\n            print(coupons_text)\n            assert coupons_text == result\n        elif casename == '不进行验证注册失败':\n            print('通道0')\n            time.sleep(10)      #等待验证码发送至邮箱\n            code = Get_Code().wangyi(username=useraccount, password='Qwe3541118', name='hydraulic', no=1)  # 获取验证码\n            print(code[0])\n            self.input_code(driver, code)\n            time.sleep(2)\n            driver.find_element(by='css selector',value='#app > div > div.login-form-wrap > '\n                                                        'div.login-form.margin-bottom > form > div:nth-child(1) > div'\n                                                        ' > div > span > span > input').send_keys(data[1].split('=')[-1]) # 输入密码\n    \n            time.sleep(0.5)\n            driver.find_element(by=\"css selector\",\n                                value='#app > div > div.login-form-wrap > div.login-form.margin-bottom > form > '\n                                      'div.btn-out.ant-row.ant-form-item > div > div > span > div > a').click()  # 点击下一步\n            WebDriverWait(driver,30,0.2).until(lambda driver:driver.find_element(by='css selector',value='body > div.ant-message > span > div > div > div > span'))\n            time.sleep(2)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(f'text 为{text}')\n            print(f'result 为{result}')\n            assert text == result\n        else:\n            try:\n                self.regist_mode1(useraccount, driver, data)\n                text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                           value=f\"{assert_way.split('=', 1)[1]}\").text\n                print('通道0')\n                print(text)\n                assert text == result\n            except :\n>               raise AssertionError\nE               AssertionError\n\n..\\mode\\register.py:162: AssertionError",
    "steps" : [ {
      "name" : "添加失败截图...",
      "time" : {
        "start" : 1651737803395,
        "stop" : 1651737803537,
        "duration" : 142
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "bcf72e5971ecc6a8",
        "name" : "失败截图",
        "source" : "bcf72e5971ecc6a8.png",
        "type" : "image/png",
        "size" : 46413
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "2604783d73650deb",
      "name" : "stdout",
      "source" : "2604783d73650deb.txt",
      "type" : "text/plain",
      "size" : 19
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1651739721148,
      "stop" : 1651739721616,
      "duration" : 468
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "driver::0",
    "time" : {
      "start" : 1651739721619,
      "stop" : 1651739721619,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "注册"
  }, {
    "name" : "suite",
    "value" : "test_main"
  }, {
    "name" : "subSuite",
    "value" : "Test_Main"
  }, {
    "name" : "host",
    "value" : "DESKTOP-NB3FDE0"
  }, {
    "name" : "thread",
    "value" : "23944-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_main"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "Parameter",
    "value" : "{'case_no': '25', 'casename': '密码为小写字母+特殊字符注册失败', 'mode': '注册', 'data': 'useraccount=a883774917@163.com\\npassword=asdf！@#￥', 'assert_way': 'xpath=/html/body/div[3]/div/div/div/div[2]/div/div/div', 'result': 'Please set the password to a combination of 6 to 16 digits and letters'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 2,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 22,
        "unknown" : 0,
        "total" : 26
      },
      "items" : [ {
        "uid" : "608a46458706b323",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/50/allure/#testresult/608a46458706b323",
        "status" : "passed",
        "time" : {
          "start" : 1651219085533,
          "stop" : 1651219127095,
          "duration" : 41562
        }
      }, {
        "uid" : "547a718c72628b12",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/49/allure/#testresult/547a718c72628b12",
        "status" : "passed",
        "time" : {
          "start" : 1651200429451,
          "stop" : 1651200470219,
          "duration" : 40768
        }
      }, {
        "uid" : "de1bc110e56dcefc",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/48/allure/#testresult/de1bc110e56dcefc",
        "status" : "passed",
        "time" : {
          "start" : 1651194519395,
          "stop" : 1651194561119,
          "duration" : 41724
        }
      }, {
        "uid" : "2b5019e8dd809b3f",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/47/allure/#testresult/2b5019e8dd809b3f",
        "status" : "passed",
        "time" : {
          "start" : 1651051508630,
          "stop" : 1651051549787,
          "duration" : 41157
        }
      }, {
        "uid" : "621f6b6ea1f58197",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/46/allure/#testresult/621f6b6ea1f58197",
        "status" : "passed",
        "time" : {
          "start" : 1651036760783,
          "stop" : 1651036801123,
          "duration" : 40340
        }
      }, {
        "uid" : "499286d04e07c883",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/45/allure/#testresult/499286d04e07c883",
        "status" : "passed",
        "time" : {
          "start" : 1651032972045,
          "stop" : 1651033013610,
          "duration" : 41565
        }
      }, {
        "uid" : "cc2655ca8868fc82",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/43/allure/#testresult/cc2655ca8868fc82",
        "status" : "passed",
        "time" : {
          "start" : 1651021719162,
          "stop" : 1651021760754,
          "duration" : 41592
        }
      }, {
        "uid" : "56d373448d4d96d7",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/42/allure/#testresult/56d373448d4d96d7",
        "status" : "passed",
        "time" : {
          "start" : 1650960147733,
          "stop" : 1650960187318,
          "duration" : 39585
        }
      }, {
        "uid" : "23225ffc19cd190e",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/41/allure/#testresult/23225ffc19cd190e",
        "status" : "passed",
        "time" : {
          "start" : 1650956794120,
          "stop" : 1650956833878,
          "duration" : 39758
        }
      }, {
        "uid" : "f1531671e5b50e9d",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/40/allure/#testresult/f1531671e5b50e9d",
        "status" : "passed",
        "time" : {
          "start" : 1650951001381,
          "stop" : 1650951041820,
          "duration" : 40439
        }
      }, {
        "uid" : "8dd256baf4a16173",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/39/allure/#testresult/8dd256baf4a16173",
        "status" : "passed",
        "time" : {
          "start" : 1650935209285,
          "stop" : 1650935250537,
          "duration" : 41252
        }
      }, {
        "uid" : "7db639735bbd57ea",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/38/allure/#testresult/7db639735bbd57ea",
        "status" : "passed",
        "time" : {
          "start" : 1650868663643,
          "stop" : 1650868705834,
          "duration" : 42191
        }
      }, {
        "uid" : "4e6aca64074a6f0f",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/37/allure/#testresult/4e6aca64074a6f0f",
        "status" : "passed",
        "time" : {
          "start" : 1650866224704,
          "stop" : 1650866268811,
          "duration" : 44107
        }
      }, {
        "uid" : "5ca0d5d801c454d0",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/36/allure/#testresult/5ca0d5d801c454d0",
        "status" : "passed",
        "time" : {
          "start" : 1650857862250,
          "stop" : 1650857907626,
          "duration" : 45376
        }
      }, {
        "uid" : "91c2ffdda47a54a5",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/34/allure/#testresult/91c2ffdda47a54a5",
        "status" : "passed",
        "time" : {
          "start" : 1650854092823,
          "stop" : 1650854138654,
          "duration" : 45831
        }
      }, {
        "uid" : "d16f528c82530d28",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/33/allure/#testresult/d16f528c82530d28",
        "status" : "passed",
        "time" : {
          "start" : 1650852138598,
          "stop" : 1650852186605,
          "duration" : 48007
        }
      }, {
        "uid" : "15cccef812f2aef5",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/32/allure/#testresult/15cccef812f2aef5",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650789108833,
          "stop" : 1650789145428,
          "duration" : 36595
        }
      }, {
        "uid" : "d60d4eca6a0c56ca",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/31/allure/#testresult/d60d4eca6a0c56ca",
        "status" : "passed",
        "time" : {
          "start" : 1650785452221,
          "stop" : 1650785495336,
          "duration" : 43115
        }
      }, {
        "uid" : "9df92287d5f29b4d",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/30/allure/#testresult/9df92287d5f29b4d",
        "status" : "passed",
        "time" : {
          "start" : 1650604193295,
          "stop" : 1650604236292,
          "duration" : 42997
        }
      }, {
        "uid" : "1ba741b7bd56e9db",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/29/allure/#testresult/1ba741b7bd56e9db",
        "status" : "passed",
        "time" : {
          "start" : 1650599176501,
          "stop" : 1650599220020,
          "duration" : 43519
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "972ee636d7443ab6.json",
  "parameterValues" : [ "{'case_no': '25', 'casename': '密码为小写字母+特殊字符注册失败', 'mode': '注册', 'data': 'useraccount=a883774917@163.com\\npassword=asdf！@#￥', 'assert_way': 'xpath=/html/body/div[3]/div/div/div/div[2]/div/div/div', 'result': 'Please set the password to a combination of 6 to 16 digits and letters'}" ]
}