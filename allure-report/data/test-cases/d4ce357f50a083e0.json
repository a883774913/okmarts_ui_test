{
  "uid" : "d4ce357f50a083e0",
  "name" : "密码为数字+小写字母+大写字母与+特殊字符注册成功",
  "fullName" : "test_main.Test_Main#test_regist",
  "historyId" : "9c8084bdade3c8359a3aa1068b600ada",
  "time" : {
    "start" : 1650520659928,
    "stop" : 1650520703700,
    "duration" : 43772
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_main.Test_Main object at 0x000001C6692D95E0>\nParameter = {'assert_way': 'class name=text-tit-lg', 'case_no': '32', 'casename': '密码为数字+小写字母+大写字母与+特殊字符注册成功', 'data': 'useraccount=a883774917@163.com\\npassword=123asdASD!@#', ...}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7919d4ddc9f352fb78ac4e0214aa5e99\")>\n\n    @allure.feature('注册')\n    @pytest.mark.parametrize('Parameter',case_infos['registe'],ids=casename_infos['registe'])\n    def test_regist(self,Parameter,driver):\n        allure.dynamic.title(Parameter['casename'])  # 测试用例名称\n>       Regist().regist(Parameter,driver)\n\ntest_main.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.register.Regist object at 0x000001C6692D90D0>\nParameter = {'assert_way': 'class name=text-tit-lg', 'case_no': '32', 'casename': '密码为数字+小写字母+大写字母与+特殊字符注册成功', 'data': 'useraccount=a883774917@163.com\\npassword=123asdASD!@#', ...}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7919d4ddc9f352fb78ac4e0214aa5e99\")>\n\n    def regist(self, Parameter, driver):\n        casename = Parameter['casename']\n        mode = Parameter['mode']\n        data = Parameter['data'].split('\\n')\n        if casename == '用户名邮箱为空下一步操作置灰':\n            useraccount = data[0].split('=')[-1]\n        elif casename == '输入已存在的用户名注册失败':\n            useraccount = '979172251@qq.com'\n        else:\n            useraccount = Common().random_email_account()\n    \n        assert_way = Parameter['assert_way']\n        result = Parameter['result']\n        driver.get('http://18.118.13.94:81/my/register')\n        time.sleep(0.5)\n        driver.find_element(by='id', value='register_step_1_userAccount').send_keys(useraccount)\n    \n        if casename == '不勾选用户协议注册失败':\n            driver.find_element(by='class name', value='ant-checkbox').click()\n        else:\n            pass\n    \n        driver.find_element(by='xpath',\n                            value='//*[@id=\"app\"]/div/div[1]/div[2]/form/div[3]/div/div/span/div/button/a').click()  # 点击下一步发送验证码\n    \n        if casename == '用户名邮箱为空下一步操作置灰':\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").get_attribute('disabled')\n            print(text)\n            assert text == result\n        elif casename == '关闭验证码页面成功':\n            time.sleep(3)\n            # print(self.dr.find_element(by='class name', value='ant-modal-body').is_displayed())\n            driver.find_element(by='class name', value='anticon.anticon-close.ant-modal-close-icon').click()\n            time.sleep(0.5)\n            assert driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").is_displayed() is not result\n        elif casename == '使用过期验证码验证失败':\n            code = Get_Code().wangyi(username=useraccount, password='Qwe3541118', name='hydraulic', no=2)  # 获取验证码\n            print(code[0])\n            self.input_code(driver, code)\n            time.sleep(1.3)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(text)\n            assert text == result\n        elif casename == '输入错误验证码注册失败':\n            time.sleep(2)\n            self.input_code(driver, ['111111'])\n            time.sleep(1.3)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(text)\n            assert text == result\n        elif casename == '超时后再次发送验证码成功':\n            time.sleep(63)\n            driver.find_element(by='xpath', value='/html/body/div[2]/div/div[2]/div/div[2]/div/div/div[2]/a').click()\n            time.sleep(3)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(text)\n            assert text == result\n        elif casename in ['邮箱不含@弹出错误提示', '输入已存在的用户名注册失败', '不勾选用户协议注册失败']:\n            time.sleep(1)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(text)\n            assert text == result\n        elif casename == '注册完成后领取优惠卷成功':\n            self.regist_mode1(useraccount, driver, data)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div[5]/img').click()  # 点击礼物箱\n            time.sleep(0.2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            text = driver.find_element(by='xpath', value='/html/body/div[2]/span/div/div/div/span').text\n            print(text)\n            driver.find_element(by='id', value='horizontal_login_userAccount').send_keys(useraccount)  # 登录\n            driver.find_element(by='id', value='horizontal_login_password').send_keys(data[1].split('=')[-1])\n            driver.find_element(by='class name', value='atn-btn-orange.ant-btn.ant-btn-lg.ant-btn-block').click()\n            time.sleep(2)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div/div[2]/div[3]/div[1]/span/p').click()\n            time.sleep(1.5)\n            coupons_text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(coupons_text)\n            assert text == 'success' and coupons_text == result\n    \n        else:\n            self.regist_mode1(useraccount, driver, data)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(text)\n>           assert text == result\nE           AssertionError\n\n..\\mode\\register.py:111: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "driver",
    "time" : {
      "start" : 1650519838348,
      "stop" : 1650519840342,
      "duration" : 1994
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1650519840343,
      "stop" : 1650519840343,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_main.Test_Main object at 0x000001C6692D95E0>\nParameter = {'assert_way': 'class name=text-tit-lg', 'case_no': '32', 'casename': '密码为数字+小写字母+大写字母与+特殊字符注册成功', 'data': 'useraccount=a883774917@163.com\\npassword=123asdASD!@#', ...}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7919d4ddc9f352fb78ac4e0214aa5e99\")>\n\n    @allure.feature('注册')\n    @pytest.mark.parametrize('Parameter',case_infos['registe'],ids=casename_infos['registe'])\n    def test_regist(self,Parameter,driver):\n        allure.dynamic.title(Parameter['casename'])  # 测试用例名称\n>       Regist().regist(Parameter,driver)\n\ntest_main.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.register.Regist object at 0x000001C6692D90D0>\nParameter = {'assert_way': 'class name=text-tit-lg', 'case_no': '32', 'casename': '密码为数字+小写字母+大写字母与+特殊字符注册成功', 'data': 'useraccount=a883774917@163.com\\npassword=123asdASD!@#', ...}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7919d4ddc9f352fb78ac4e0214aa5e99\")>\n\n    def regist(self, Parameter, driver):\n        casename = Parameter['casename']\n        mode = Parameter['mode']\n        data = Parameter['data'].split('\\n')\n        if casename == '用户名邮箱为空下一步操作置灰':\n            useraccount = data[0].split('=')[-1]\n        elif casename == '输入已存在的用户名注册失败':\n            useraccount = '979172251@qq.com'\n        else:\n            useraccount = Common().random_email_account()\n    \n        assert_way = Parameter['assert_way']\n        result = Parameter['result']\n        driver.get('http://18.118.13.94:81/my/register')\n        time.sleep(0.5)\n        driver.find_element(by='id', value='register_step_1_userAccount').send_keys(useraccount)\n    \n        if casename == '不勾选用户协议注册失败':\n            driver.find_element(by='class name', value='ant-checkbox').click()\n        else:\n            pass\n    \n        driver.find_element(by='xpath',\n                            value='//*[@id=\"app\"]/div/div[1]/div[2]/form/div[3]/div/div/span/div/button/a').click()  # 点击下一步发送验证码\n    \n        if casename == '用户名邮箱为空下一步操作置灰':\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").get_attribute('disabled')\n            print(text)\n            assert text == result\n        elif casename == '关闭验证码页面成功':\n            time.sleep(3)\n            # print(self.dr.find_element(by='class name', value='ant-modal-body').is_displayed())\n            driver.find_element(by='class name', value='anticon.anticon-close.ant-modal-close-icon').click()\n            time.sleep(0.5)\n            assert driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").is_displayed() is not result\n        elif casename == '使用过期验证码验证失败':\n            code = Get_Code().wangyi(username=useraccount, password='Qwe3541118', name='hydraulic', no=2)  # 获取验证码\n            print(code[0])\n            self.input_code(driver, code)\n            time.sleep(1.3)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(text)\n            assert text == result\n        elif casename == '输入错误验证码注册失败':\n            time.sleep(2)\n            self.input_code(driver, ['111111'])\n            time.sleep(1.3)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(text)\n            assert text == result\n        elif casename == '超时后再次发送验证码成功':\n            time.sleep(63)\n            driver.find_element(by='xpath', value='/html/body/div[2]/div/div[2]/div/div[2]/div/div/div[2]/a').click()\n            time.sleep(3)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(text)\n            assert text == result\n        elif casename in ['邮箱不含@弹出错误提示', '输入已存在的用户名注册失败', '不勾选用户协议注册失败']:\n            time.sleep(1)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(text)\n            assert text == result\n        elif casename == '注册完成后领取优惠卷成功':\n            self.regist_mode1(useraccount, driver, data)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div[5]/img').click()  # 点击礼物箱\n            time.sleep(0.2)\n            driver.find_element(by='class name', value='bg-orange.ant-btn').click()  # 点击确定\n            time.sleep(2)\n            text = driver.find_element(by='xpath', value='/html/body/div[2]/span/div/div/div/span').text\n            print(text)\n            driver.find_element(by='id', value='horizontal_login_userAccount').send_keys(useraccount)  # 登录\n            driver.find_element(by='id', value='horizontal_login_password').send_keys(data[1].split('=')[-1])\n            driver.find_element(by='class name', value='atn-btn-orange.ant-btn.ant-btn-lg.ant-btn-block').click()\n            time.sleep(2)\n            driver.find_element(by='xpath', value='//*[@id=\"app\"]/div/div[1]/div/div[2]/div[3]/div[1]/span/p').click()\n            time.sleep(1.5)\n            coupons_text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                               value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(coupons_text)\n            assert text == 'success' and coupons_text == result\n    \n        else:\n            self.regist_mode1(useraccount, driver, data)\n            text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                       value=f\"{assert_way.split('=', 1)[1]}\").text\n            print(text)\n>           assert text == result\nE           AssertionError\n\n..\\mode\\register.py:111: AssertionError",
    "steps" : [ {
      "name" : "添加失败截图...",
      "time" : {
        "start" : 1650520703716,
        "stop" : 1650520703862,
        "duration" : 146
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "80572766c4aa76fd",
        "name" : "失败截图",
        "source" : "80572766c4aa76fd.png",
        "type" : "image/png",
        "size" : 54065
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ {
      "uid" : "e7adf9ed73e80b71",
      "name" : "stdout",
      "source" : "e7adf9ed73e80b71.txt",
      "type" : "text/plain",
      "size" : 46
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 1,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1650520752838,
      "stop" : 1650520752838,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "driver::0",
    "time" : {
      "start" : 1650520752840,
      "stop" : 1650520753060,
      "duration" : 220
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "注册"
  }, {
    "name" : "suite",
    "value" : "test_main"
  }, {
    "name" : "subSuite",
    "value" : "Test_Main"
  }, {
    "name" : "host",
    "value" : "DESKTOP-NB3FDE0"
  }, {
    "name" : "thread",
    "value" : "17060-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_main"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "Parameter",
    "value" : "{'case_no': '32', 'casename': '密码为数字+小写字母+大写字母与+特殊字符注册成功', 'mode': '注册', 'data': 'useraccount=a883774917@163.com\\npassword=123asdASD!@#', 'assert_way': 'class name=text-tit-lg', 'result': 'Congratulations, registration is successful'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 3,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 3
      },
      "items" : [ {
        "uid" : "c02386e52b680698",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/23/allure/#testresult/c02386e52b680698",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650519727525,
          "stop" : 1650519769301,
          "duration" : 41776
        }
      }, {
        "uid" : "208b1955ab51a80b",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/22/allure/#testresult/208b1955ab51a80b",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650518341640,
          "stop" : 1650518383582,
          "duration" : 41942
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "d4ce357f50a083e0.json",
  "parameterValues" : [ "{'case_no': '32', 'casename': '密码为数字+小写字母+大写字母与+特殊字符注册成功', 'mode': '注册', 'data': 'useraccount=a883774917@163.com\\npassword=123asdASD!@#', 'assert_way': 'class name=text-tit-lg', 'result': 'Congratulations, registration is successful'}" ]
}