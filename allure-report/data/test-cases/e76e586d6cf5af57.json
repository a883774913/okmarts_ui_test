{
  "uid" : "e76e586d6cf5af57",
  "name" : "登录状态点击 Order without payment页面正确跳转至购物车页面",
  "fullName" : "test_main.Test_Main#test_help_center",
  "historyId" : "f723addca1ecadbf2f361503dde606bb",
  "time" : {
    "start" : 1651037913841,
    "stop" : 1651037920571,
    "duration" : 6730
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#app > div > div > div.ui-container > div.content.flex.space-between > div.auction-info > div.title-1.flex.align-center.space-between > div.name.flex.align-center > span\"}\n  (Session info: chrome=100.0.4896.127)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00927413+2389011]\n\tOrdinal0 [0x008B9F61+1941345]\n\tOrdinal0 [0x007AC658+837208]\n\tOrdinal0 [0x007D91DD+1020381]\n\tOrdinal0 [0x007D949B+1021083]\n\tOrdinal0 [0x00806032+1204274]\n\tOrdinal0 [0x007F4194+1130900]\n\tOrdinal0 [0x00804302+1196802]\n\tOrdinal0 [0x007F3F66+1130342]\n\tOrdinal0 [0x007CE546+976198]\n\tOrdinal0 [0x007CF456+980054]\n\tGetHandleVerifier [0x00AD9632+1727522]\n\tGetHandleVerifier [0x00B8BA4D+2457661]\n\tGetHandleVerifier [0x009BEB81+569713]\n\tGetHandleVerifier [0x009BDD76+566118]\n\tOrdinal0 [0x008C0B2B+1968939]\n\tOrdinal0 [0x008C5988+1989000]\n\tOrdinal0 [0x008C5A75+1989237]\n\tOrdinal0 [0x008CECB1+2026673]\n\tBaseThreadInitThunk [0x75906739+25]\n\tRtlGetFullPathName_UEx [0x77408E7F+1215]\n\tRtlGetFullPathName_UEx [0x77408E4D+1165]",
  "statusTrace" : "self = <okmarts_ui_test.mode.help_center.Help_Center object at 0x000001D9557D79D0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b93df9bf9fed55af28b9b9fc5d059e9f\")>\nParameter = {'assert_way': 'xpath=//*[@id=\"app\"]/div/div/div[2]/div[1]/a', 'case_no': '60', 'casename': '登录状态点击 Order without payment页面正确跳转至购物车页面', 'data': '', ...}\n\n    def help_center(self, driver, Parameter):\n        casename = Parameter['casename']\n        mode = Parameter['mode']\n        data = Parameter['data'].split('\\n')\n        print(data)\n        assert_way = Parameter['assert_way']\n        result = Parameter['result']\n    \n        driver.get('http://18.118.13.94:81/index')  # 打开首页\n        time.sleep(1)\n        if '登录状态' in casename:\n            Common().is_login(driver,useraccount='979172251@qq.com',password='a123456')\n            time.sleep(2)\n            if casename == '登录状态点击Retrieve Password页面跳转到修改密码页面':\n                print('通道1')\n                self.Go(driver, assert_way, result,1)\n            elif casename == '登录状态点击Change Email Address(Need to log in first)页面成功跳转至邮箱修改页面':\n                self.Go(driver,assert_way,result,2)\n            elif casename == '登录状态点击点击Auction payment balance页面正确跳转至拍卖页面':\n                self.Go(driver,assert_way,result,3)\n            elif casename == '登录状态点击 Order without payment页面正确跳转至购物车页面':\n                try:\n>                   self.Go(driver, assert_way, result, 4)\n\n..\\mode\\help_center.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.help_center.Help_Center object at 0x000001D9557D79D0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b93df9bf9fed55af28b9b9fc5d059e9f\")>\nassert_way = 'xpath=//*[@id=\"app\"]/div/div/div[2]/div[1]/a'\nresult = 'The shopping cart is still empty for the time being, go pick a few items right away'\nnumber = 4\n\n    def Go(self, driver, assert_way, result,number):\n        \"\"\"\n        进入第几个入口\n        :param driver:\n        :param assert_way:\n        :param result:\n        :param number: 1为Retrieve Password 2为Change Email Address(Need to log in first)\n        :return:\n        \"\"\"\n        driver.find_element(by='css selector',\n                            value='#app > div > div.global-header > div > div.top-menu > a:nth-child(3)').click()  # 点击帮助中心\n        WebDriverWait(driver, 30, 0.2).until(lambda x: x.find_element_by_css_selector(\n            \"#app > div > div.ui-container > div.content.page-help-content > div:nth-child(1) > div.text-tit-lg\"))\n        driver.find_element(by='css selector',\n                            value=f'#app > div > div.ui-container > div.content.page-help-content > div:nth-child(1) > div.flex.href-list.space-between.text-xs > a:nth-child({number})').click()\n        time.sleep(1)\n>       text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                   value=f\"{assert_way.split('=', 1)[1]}\").text\n\n..\\mode\\help_center.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b93df9bf9fed55af28b9b9fc5d059e9f\")>\nby = 'xpath', value = '//*[@id=\"app\"]/div/div/div[2]/div[1]/a'\n\n    def find_element(self, by=By.ID, value=None) -> WebElement:\n        \"\"\"\n        Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            return self.find_elements(by=by, value=value)[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = '[id=\"%s\"]' % value\n        elif by == By.TAG_NAME:\n            by = By.CSS_SELECTOR\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = \".%s\" % value\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = '[name=\"%s\"]' % value\n    \n>       return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n            'value': value})['value']\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1244: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b93df9bf9fed55af28b9b9fc5d059e9f\")>\ndriver_command = 'findElement'\nparams = {'using': 'xpath', 'value': '//*[@id=\"app\"]/div/div/div[2]/div[1]/a'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D9556F2C70>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...unk [0x75906739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77408E7F+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x77408E4D+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id=\"app\"]/div/div/div[2]/div[1]/a\"}\nE         (Session info: chrome=100.0.4896.127)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00927413+2389011]\nE       \tOrdinal0 [0x008B9F61+1941345]\nE       \tOrdinal0 [0x007AC658+837208]\nE       \tOrdinal0 [0x007D91DD+1020381]\nE       \tOrdinal0 [0x007D949B+1021083]\nE       \tOrdinal0 [0x00806032+1204274]\nE       \tOrdinal0 [0x007F4194+1130900]\nE       \tOrdinal0 [0x00804302+1196802]\nE       \tOrdinal0 [0x007F3F66+1130342]\nE       \tOrdinal0 [0x007CE546+976198]\nE       \tOrdinal0 [0x007CF456+980054]\nE       \tGetHandleVerifier [0x00AD9632+1727522]\nE       \tGetHandleVerifier [0x00B8BA4D+2457661]\nE       \tGetHandleVerifier [0x009BEB81+569713]\nE       \tGetHandleVerifier [0x009BDD76+566118]\nE       \tOrdinal0 [0x008C0B2B+1968939]\nE       \tOrdinal0 [0x008C5988+1989000]\nE       \tOrdinal0 [0x008C5A75+1989237]\nE       \tOrdinal0 [0x008CECB1+2026673]\nE       \tBaseThreadInitThunk [0x75906739+25]\nE       \tRtlGetFullPathName_UEx [0x77408E7F+1215]\nE       \tRtlGetFullPathName_UEx [0x77408E4D+1165]\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_main.Test_Main object at 0x000001D9558D0130>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b93df9bf9fed55af28b9b9fc5d059e9f\")>\nParameter = {'assert_way': 'xpath=//*[@id=\"app\"]/div/div/div[2]/div[1]/a', 'case_no': '60', 'casename': '登录状态点击 Order without payment页面正确跳转至购物车页面', 'data': '', ...}\n\n    \n    @allure.feature('帮助中心')\n    @pytest.mark.parametrize('Parameter', case_infos['help_center'], ids=casename_infos['help_center'])\n    def test_help_center(self,driver,Parameter):\n>       allure.dynamic.title(Parameter['casename'])\n\ntest_main.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\mode\\help_center.py:37: in help_center\n    text = driver.find_element(by='css selector',value='#app > div > div > div.ui-container > div.content.flex.space-between > div.auction-info > div.title-1.flex.align-center.space-between > div.name.flex.align-center > span').text\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1244: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D9556F2C70>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...unk [0x75906739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77408E7F+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x77408E4D+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#app > div > div > div.ui-container > div.content.flex.space-between > div.auction-info > div.title-1.flex.align-center.space-between > div.name.flex.align-center > span\"}\nE         (Session info: chrome=100.0.4896.127)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00927413+2389011]\nE       \tOrdinal0 [0x008B9F61+1941345]\nE       \tOrdinal0 [0x007AC658+837208]\nE       \tOrdinal0 [0x007D91DD+1020381]\nE       \tOrdinal0 [0x007D949B+1021083]\nE       \tOrdinal0 [0x00806032+1204274]\nE       \tOrdinal0 [0x007F4194+1130900]\nE       \tOrdinal0 [0x00804302+1196802]\nE       \tOrdinal0 [0x007F3F66+1130342]\nE       \tOrdinal0 [0x007CE546+976198]\nE       \tOrdinal0 [0x007CF456+980054]\nE       \tGetHandleVerifier [0x00AD9632+1727522]\nE       \tGetHandleVerifier [0x00B8BA4D+2457661]\nE       \tGetHandleVerifier [0x009BEB81+569713]\nE       \tGetHandleVerifier [0x009BDD76+566118]\nE       \tOrdinal0 [0x008C0B2B+1968939]\nE       \tOrdinal0 [0x008C5988+1989000]\nE       \tOrdinal0 [0x008C5A75+1989237]\nE       \tOrdinal0 [0x008CECB1+2026673]\nE       \tBaseThreadInitThunk [0x75906739+25]\nE       \tRtlGetFullPathName_UEx [0x77408E7F+1215]\nE       \tRtlGetFullPathName_UEx [0x77408E4D+1165]\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchElementException",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "driver",
    "time" : {
      "start" : 1651036160659,
      "stop" : 1651036162863,
      "duration" : 2204
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1651036162864,
      "stop" : 1651036162864,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#app > div > div > div.ui-container > div.content.flex.space-between > div.auction-info > div.title-1.flex.align-center.space-between > div.name.flex.align-center > span\"}\n  (Session info: chrome=100.0.4896.127)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00927413+2389011]\n\tOrdinal0 [0x008B9F61+1941345]\n\tOrdinal0 [0x007AC658+837208]\n\tOrdinal0 [0x007D91DD+1020381]\n\tOrdinal0 [0x007D949B+1021083]\n\tOrdinal0 [0x00806032+1204274]\n\tOrdinal0 [0x007F4194+1130900]\n\tOrdinal0 [0x00804302+1196802]\n\tOrdinal0 [0x007F3F66+1130342]\n\tOrdinal0 [0x007CE546+976198]\n\tOrdinal0 [0x007CF456+980054]\n\tGetHandleVerifier [0x00AD9632+1727522]\n\tGetHandleVerifier [0x00B8BA4D+2457661]\n\tGetHandleVerifier [0x009BEB81+569713]\n\tGetHandleVerifier [0x009BDD76+566118]\n\tOrdinal0 [0x008C0B2B+1968939]\n\tOrdinal0 [0x008C5988+1989000]\n\tOrdinal0 [0x008C5A75+1989237]\n\tOrdinal0 [0x008CECB1+2026673]\n\tBaseThreadInitThunk [0x75906739+25]\n\tRtlGetFullPathName_UEx [0x77408E7F+1215]\n\tRtlGetFullPathName_UEx [0x77408E4D+1165]",
    "statusTrace" : "self = <okmarts_ui_test.mode.help_center.Help_Center object at 0x000001D9557D79D0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b93df9bf9fed55af28b9b9fc5d059e9f\")>\nParameter = {'assert_way': 'xpath=//*[@id=\"app\"]/div/div/div[2]/div[1]/a', 'case_no': '60', 'casename': '登录状态点击 Order without payment页面正确跳转至购物车页面', 'data': '', ...}\n\n    def help_center(self, driver, Parameter):\n        casename = Parameter['casename']\n        mode = Parameter['mode']\n        data = Parameter['data'].split('\\n')\n        print(data)\n        assert_way = Parameter['assert_way']\n        result = Parameter['result']\n    \n        driver.get('http://18.118.13.94:81/index')  # 打开首页\n        time.sleep(1)\n        if '登录状态' in casename:\n            Common().is_login(driver,useraccount='979172251@qq.com',password='a123456')\n            time.sleep(2)\n            if casename == '登录状态点击Retrieve Password页面跳转到修改密码页面':\n                print('通道1')\n                self.Go(driver, assert_way, result,1)\n            elif casename == '登录状态点击Change Email Address(Need to log in first)页面成功跳转至邮箱修改页面':\n                self.Go(driver,assert_way,result,2)\n            elif casename == '登录状态点击点击Auction payment balance页面正确跳转至拍卖页面':\n                self.Go(driver,assert_way,result,3)\n            elif casename == '登录状态点击 Order without payment页面正确跳转至购物车页面':\n                try:\n>                   self.Go(driver, assert_way, result, 4)\n\n..\\mode\\help_center.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <okmarts_ui_test.mode.help_center.Help_Center object at 0x000001D9557D79D0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b93df9bf9fed55af28b9b9fc5d059e9f\")>\nassert_way = 'xpath=//*[@id=\"app\"]/div/div/div[2]/div[1]/a'\nresult = 'The shopping cart is still empty for the time being, go pick a few items right away'\nnumber = 4\n\n    def Go(self, driver, assert_way, result,number):\n        \"\"\"\n        进入第几个入口\n        :param driver:\n        :param assert_way:\n        :param result:\n        :param number: 1为Retrieve Password 2为Change Email Address(Need to log in first)\n        :return:\n        \"\"\"\n        driver.find_element(by='css selector',\n                            value='#app > div > div.global-header > div > div.top-menu > a:nth-child(3)').click()  # 点击帮助中心\n        WebDriverWait(driver, 30, 0.2).until(lambda x: x.find_element_by_css_selector(\n            \"#app > div > div.ui-container > div.content.page-help-content > div:nth-child(1) > div.text-tit-lg\"))\n        driver.find_element(by='css selector',\n                            value=f'#app > div > div.ui-container > div.content.page-help-content > div:nth-child(1) > div.flex.href-list.space-between.text-xs > a:nth-child({number})').click()\n        time.sleep(1)\n>       text = driver.find_element(by=f\"{assert_way.split('=', 1)[0]}\",\n                                   value=f\"{assert_way.split('=', 1)[1]}\").text\n\n..\\mode\\help_center.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b93df9bf9fed55af28b9b9fc5d059e9f\")>\nby = 'xpath', value = '//*[@id=\"app\"]/div/div/div[2]/div[1]/a'\n\n    def find_element(self, by=By.ID, value=None) -> WebElement:\n        \"\"\"\n        Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            return self.find_elements(by=by, value=value)[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = '[id=\"%s\"]' % value\n        elif by == By.TAG_NAME:\n            by = By.CSS_SELECTOR\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = \".%s\" % value\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = '[name=\"%s\"]' % value\n    \n>       return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n            'value': value})['value']\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1244: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b93df9bf9fed55af28b9b9fc5d059e9f\")>\ndriver_command = 'findElement'\nparams = {'using': 'xpath', 'value': '//*[@id=\"app\"]/div/div/div[2]/div[1]/a'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D9556F2C70>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...unk [0x75906739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77408E7F+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x77408E4D+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id=\"app\"]/div/div/div[2]/div[1]/a\"}\nE         (Session info: chrome=100.0.4896.127)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00927413+2389011]\nE       \tOrdinal0 [0x008B9F61+1941345]\nE       \tOrdinal0 [0x007AC658+837208]\nE       \tOrdinal0 [0x007D91DD+1020381]\nE       \tOrdinal0 [0x007D949B+1021083]\nE       \tOrdinal0 [0x00806032+1204274]\nE       \tOrdinal0 [0x007F4194+1130900]\nE       \tOrdinal0 [0x00804302+1196802]\nE       \tOrdinal0 [0x007F3F66+1130342]\nE       \tOrdinal0 [0x007CE546+976198]\nE       \tOrdinal0 [0x007CF456+980054]\nE       \tGetHandleVerifier [0x00AD9632+1727522]\nE       \tGetHandleVerifier [0x00B8BA4D+2457661]\nE       \tGetHandleVerifier [0x009BEB81+569713]\nE       \tGetHandleVerifier [0x009BDD76+566118]\nE       \tOrdinal0 [0x008C0B2B+1968939]\nE       \tOrdinal0 [0x008C5988+1989000]\nE       \tOrdinal0 [0x008C5A75+1989237]\nE       \tOrdinal0 [0x008CECB1+2026673]\nE       \tBaseThreadInitThunk [0x75906739+25]\nE       \tRtlGetFullPathName_UEx [0x77408E7F+1215]\nE       \tRtlGetFullPathName_UEx [0x77408E4D+1165]\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_main.Test_Main object at 0x000001D9558D0130>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b93df9bf9fed55af28b9b9fc5d059e9f\")>\nParameter = {'assert_way': 'xpath=//*[@id=\"app\"]/div/div/div[2]/div[1]/a', 'case_no': '60', 'casename': '登录状态点击 Order without payment页面正确跳转至购物车页面', 'data': '', ...}\n\n    \n    @allure.feature('帮助中心')\n    @pytest.mark.parametrize('Parameter', case_infos['help_center'], ids=casename_infos['help_center'])\n    def test_help_center(self,driver,Parameter):\n>       allure.dynamic.title(Parameter['casename'])\n\ntest_main.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\mode\\help_center.py:37: in help_center\n    text = driver.find_element(by='css selector',value='#app > div > div > div.ui-container > div.content.flex.space-between > div.auction-info > div.title-1.flex.align-center.space-between > div.name.flex.align-center > span').text\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1244: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D9556F2C70>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...unk [0x75906739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77408E7F+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x77408E4D+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#app > div > div > div.ui-container > div.content.flex.space-between > div.auction-info > div.title-1.flex.align-center.space-between > div.name.flex.align-center > span\"}\nE         (Session info: chrome=100.0.4896.127)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00927413+2389011]\nE       \tOrdinal0 [0x008B9F61+1941345]\nE       \tOrdinal0 [0x007AC658+837208]\nE       \tOrdinal0 [0x007D91DD+1020381]\nE       \tOrdinal0 [0x007D949B+1021083]\nE       \tOrdinal0 [0x00806032+1204274]\nE       \tOrdinal0 [0x007F4194+1130900]\nE       \tOrdinal0 [0x00804302+1196802]\nE       \tOrdinal0 [0x007F3F66+1130342]\nE       \tOrdinal0 [0x007CE546+976198]\nE       \tOrdinal0 [0x007CF456+980054]\nE       \tGetHandleVerifier [0x00AD9632+1727522]\nE       \tGetHandleVerifier [0x00B8BA4D+2457661]\nE       \tGetHandleVerifier [0x009BEB81+569713]\nE       \tGetHandleVerifier [0x009BDD76+566118]\nE       \tOrdinal0 [0x008C0B2B+1968939]\nE       \tOrdinal0 [0x008C5988+1989000]\nE       \tOrdinal0 [0x008C5A75+1989237]\nE       \tOrdinal0 [0x008CECB1+2026673]\nE       \tBaseThreadInitThunk [0x75906739+25]\nE       \tRtlGetFullPathName_UEx [0x77408E7F+1215]\nE       \tRtlGetFullPathName_UEx [0x77408E4D+1165]\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchElementException",
    "steps" : [ {
      "name" : "添加失败截图...",
      "time" : {
        "start" : 1651037922801,
        "stop" : 1651037923260,
        "duration" : 459
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "a037d4110bafc7d7",
        "name" : "失败截图",
        "source" : "a037d4110bafc7d7.png",
        "type" : "image/png",
        "size" : 81363
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ {
      "uid" : "a3f7c0e8737e1736",
      "name" : "stdout",
      "source" : "a3f7c0e8737e1736.txt",
      "type" : "text/plain",
      "size" : 11
    } ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "hasContent" : true,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1651038260064,
      "stop" : 1651038260561,
      "duration" : 497
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "driver::0",
    "time" : {
      "start" : 1651038260561,
      "stop" : 1651038260561,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "帮助中心"
  }, {
    "name" : "suite",
    "value" : "test_main"
  }, {
    "name" : "subSuite",
    "value" : "Test_Main"
  }, {
    "name" : "host",
    "value" : "DESKTOP-NB3FDE0"
  }, {
    "name" : "thread",
    "value" : "21748-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_main"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "Parameter",
    "value" : "{'case_no': '60', 'casename': '登录状态点击 Order without payment页面正确跳转至购物车页面', 'mode': '帮助中心', 'data': '', 'assert_way': 'xpath=//*[@id=\"app\"]/div/div/div[2]/div[1]/a', 'result': 'The shopping cart is still empty for the time being, go pick a few items right away'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 4,
        "skipped" : 0,
        "passed" : 3,
        "unknown" : 0,
        "total" : 7
      },
      "items" : [ {
        "uid" : "34f886ad9b433be8",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/45/allure/#testresult/34f886ad9b433be8",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#app > div > div > div.ui-container > div.content.flex.space-between > div.auction-info > div.title-1.flex.align-center.space-between > div.name.flex.align-center > span\"}\n  (Session info: chrome=100.0.4896.127)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x01167413+2389011]\n\tOrdinal0 [0x010F9F61+1941345]\n\tOrdinal0 [0x00FEC658+837208]\n\tOrdinal0 [0x010191DD+1020381]\n\tOrdinal0 [0x0101949B+1021083]\n\tOrdinal0 [0x01046032+1204274]\n\tOrdinal0 [0x01034194+1130900]\n\tOrdinal0 [0x01044302+1196802]\n\tOrdinal0 [0x01033F66+1130342]\n\tOrdinal0 [0x0100E546+976198]\n\tOrdinal0 [0x0100F456+980054]\n\tGetHandleVerifier [0x01319632+1727522]\n\tGetHandleVerifier [0x013CBA4D+2457661]\n\tGetHandleVerifier [0x011FEB81+569713]\n\tGetHandleVerifier [0x011FDD76+566118]\n\tOrdinal0 [0x01100B2B+1968939]\n\tOrdinal0 [0x01105988+1989000]\n\tOrdinal0 [0x01105A75+1989237]\n\tOrdinal0 [0x0110ECB1+2026673]\n\tBaseThreadInitThunk [0x75906739+25]\n\tRtlGetFullPathName_UEx [0x77408E7F+1215]\n\tRtlGetFullPathName_UEx [0x77408E4D+1165]",
        "time" : {
          "start" : 1651034042993,
          "stop" : 1651034049737,
          "duration" : 6744
        }
      }, {
        "uid" : "800b98bde8e4490c",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/43/allure/#testresult/800b98bde8e4490c",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#app > div > div > div.ui-container > div.content.flex.space-between > div.auction-info > div.title-1.flex.align-center.space-between > div.name.flex.align-center > span\"}\n  (Session info: chrome=100.0.4896.127)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00B27413+2389011]\n\tOrdinal0 [0x00AB9F61+1941345]\n\tOrdinal0 [0x009AC658+837208]\n\tOrdinal0 [0x009D91DD+1020381]\n\tOrdinal0 [0x009D949B+1021083]\n\tOrdinal0 [0x00A06032+1204274]\n\tOrdinal0 [0x009F4194+1130900]\n\tOrdinal0 [0x00A04302+1196802]\n\tOrdinal0 [0x009F3F66+1130342]\n\tOrdinal0 [0x009CE546+976198]\n\tOrdinal0 [0x009CF456+980054]\n\tGetHandleVerifier [0x00CD9632+1727522]\n\tGetHandleVerifier [0x00D8BA4D+2457661]\n\tGetHandleVerifier [0x00BBEB81+569713]\n\tGetHandleVerifier [0x00BBDD76+566118]\n\tOrdinal0 [0x00AC0B2B+1968939]\n\tOrdinal0 [0x00AC5988+1989000]\n\tOrdinal0 [0x00AC5A75+1989237]\n\tOrdinal0 [0x00ACECB1+2026673]\n\tBaseThreadInitThunk [0x75906739+25]\n\tRtlGetFullPathName_UEx [0x77408E7F+1215]\n\tRtlGetFullPathName_UEx [0x77408E4D+1165]",
        "time" : {
          "start" : 1651023256974,
          "stop" : 1651023261622,
          "duration" : 4648
        }
      }, {
        "uid" : "dc08ed16f58c631e",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/42/allure/#testresult/dc08ed16f58c631e",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#app > div > div > div.ui-container > div.content.flex.space-between > div.auction-info > div.title-1.flex.align-center.space-between > div.name.flex.align-center > span\"}\n  (Session info: chrome=100.0.4896.127)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x005E7413+2389011]\n\tOrdinal0 [0x00579F61+1941345]\n\tOrdinal0 [0x0046C658+837208]\n\tOrdinal0 [0x004991DD+1020381]\n\tOrdinal0 [0x0049949B+1021083]\n\tOrdinal0 [0x004C6032+1204274]\n\tOrdinal0 [0x004B4194+1130900]\n\tOrdinal0 [0x004C4302+1196802]\n\tOrdinal0 [0x004B3F66+1130342]\n\tOrdinal0 [0x0048E546+976198]\n\tOrdinal0 [0x0048F456+980054]\n\tGetHandleVerifier [0x00799632+1727522]\n\tGetHandleVerifier [0x0084BA4D+2457661]\n\tGetHandleVerifier [0x0067EB81+569713]\n\tGetHandleVerifier [0x0067DD76+566118]\n\tOrdinal0 [0x00580B2B+1968939]\n\tOrdinal0 [0x00585988+1989000]\n\tOrdinal0 [0x00585A75+1989237]\n\tOrdinal0 [0x0058ECB1+2026673]\n\tBaseThreadInitThunk [0x75906739+25]\n\tRtlGetFullPathName_UEx [0x77408E7F+1215]\n\tRtlGetFullPathName_UEx [0x77408E4D+1165]",
        "time" : {
          "start" : 1650961450225,
          "stop" : 1650961454933,
          "duration" : 4708
        }
      }, {
        "uid" : "6a27cf21a9dd68f7",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/41/allure/#testresult/6a27cf21a9dd68f7",
        "status" : "passed",
        "time" : {
          "start" : 1650958040617,
          "stop" : 1650958045355,
          "duration" : 4738
        }
      }, {
        "uid" : "f949fddec6cd8362",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/40/allure/#testresult/f949fddec6cd8362",
        "status" : "passed",
        "time" : {
          "start" : 1650951979869,
          "stop" : 1650951985191,
          "duration" : 5322
        }
      }, {
        "uid" : "3aa9112912f1cb86",
        "reportUrl" : "http://localhost:8080/job/okmarts_ui_test/39/allure/#testresult/3aa9112912f1cb86",
        "status" : "passed",
        "time" : {
          "start" : 1650936426297,
          "stop" : 1650936430894,
          "duration" : 4597
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "e76e586d6cf5af57.json",
  "parameterValues" : [ "{'case_no': '60', 'casename': '登录状态点击 Order without payment页面正确跳转至购物车页面', 'mode': '帮助中心', 'data': '', 'assert_way': 'xpath=//*[@id=\"app\"]/div/div/div[2]/div[1]/a', 'result': 'The shopping cart is still empty for the time being, go pick a few items right away'}" ]
}